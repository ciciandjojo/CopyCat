{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/configure/index.ts","webpack:///./node_modules/process/browser.js","webpack:///./src/converters/url/formatted/absolute.ts","webpack:///./src/converters/url/formatted/relative.ts","webpack:///./src/converters/url/formatted/root-relative.ts","webpack:///./node_modules/js-beautify/js/lib/beautify.js","webpack:///./node_modules/js-beautify/js/lib/beautify-css.js","webpack:///./node_modules/turndown/lib/turndown.cjs.js","webpack:///./src/converters/html/html/formatted-link/absolute.ts","webpack:///./src/converters/html/html/formatted-link/relative.ts","webpack:///./src/converters/html/html/formatted-link/root-relative.ts","webpack:///./src/converters/html/markdown/commonmark.ts","webpack:///./src/converters/html/markdown/gfm.ts","webpack:///./node_modules/turndown-plugin-gfm/lib/turndown-plugin-gfm.es.js","webpack:///./src/converters/html/markdown/ghost.ts","webpack:///./node_modules/punycode/punycode.js","webpack:///./src/background/symbols.ts","webpack:///./src/background/index.ts","webpack:///./src/background/handlers.ts","webpack:///./src/content-script/api.ts","webpack:///./src/converters/index.ts","webpack:///./src/converters/url/index.ts","webpack:///./src/converters/url/video/index.ts","webpack:///./src/converters/url/video/html.ts","webpack:///./src/converters/url/audio/index.ts","webpack:///./src/converters/url/audio/html.ts","webpack:///./src/converters/url/link/index.ts","webpack:///./src/converters/url/link/html.ts","webpack:///./src/converters/url/link/markdown.ts","webpack:///./src/converters/url/link/bbcode.ts","webpack:///./src/converters/url/link/plain.ts","webpack:///./src/converters/url/image/index.ts","webpack:///./src/converters/url/image/html.ts","webpack:///./src/converters/url/image/markdown.ts","webpack:///./src/converters/url/image/bbcode.ts","webpack:///./src/converters/url/image/data-uri.ts","webpack:///./src/converters/url/formatted/index.ts","webpack:///./node_modules/path-browserify/index.js","webpack:///./src/converters/html/index.ts","webpack:///./src/converters/html/html/index.ts","webpack:///./src/converters/html/html/beautify.ts","webpack:///./node_modules/js-beautify/js/index.js","webpack:///./node_modules/js-beautify/js/lib/beautify-html.js","webpack:///./src/converters/html/html/safe.ts","webpack:///./src/converters/html/html/formatted-link/index.ts","webpack:///./src/converters/html/html/no-attr.ts","webpack:///./src/converters/html/html/only-a-tag.ts","webpack:///./src/converters/html/markdown/index.ts","webpack:///./src/converters/html/bbcode/index.ts","webpack:///./node_modules/html2bbcode/lib/html2bbcode.js","webpack:///./src/converters/html/text/index.ts","webpack:///./src/converters/html/text/plain.ts","webpack:///./src/converters/text/index.ts","webpack:///./src/converters/text/raw-string.ts","webpack:///./src/converters/text/trim.ts","webpack:///./src/converters/text/decode-entities.ts","webpack:///./node_modules/ent/index.js","webpack:///./node_modules/ent/encode.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/ent/decode.js","webpack:///./src/converters/markdown/index.ts","webpack:///./src/converters/markdown/beautify.ts","webpack:///./src/background/menus.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","createDefaultConfig","version","browser","runtime","getManifest","urlFormat","markdownFlavor","loadConfigure","config","localStorage","getItem","JSON","parse","saveConfigure","setItem","stringify","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","Item","array","noop","nextTick","args","Array","arguments","push","apply","title","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","convertUrlToAbsoluteURL","relativeUrl","baseUrl","URL","href","path_1","convertUrlToRelativeURL","absoluteUrl","absoluteUrlObj","baseUrlObj","origin","relative","pathname","convertUrlToRootRelativeURL","url","urlObj","__WEBPACK_AMD_DEFINE_RESULT__","js_beautify","configurable","nonASCIIidentifierStartChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","newline","lineBreak","source","allLineBreaks","isIdentifierStart","code","test","String","fromCharCode","isIdentifierChar","mergeOpts","acorn","Output","Tokenizer","remove_redundant_indentation","output","frame","multiline_frame","MODE","ForInitializer","Conditional","start_index","start_line_index","remove_indent","in_array","what","arr","trim","replace","ltrim","validPositionValues","OPERATOR_POSITION","list","result","x","OPERATOR_POSITION_BEFORE_OR_PRESERVE","before_newline","preserve_newline","BlockStatement","Statement","ObjectLiteral","ArrayLiteral","Expression","Beautifier","js_source_text","options","token_pos","tokenizer","current_token","last_type","last_last_text","indent_string","flags","previous_flags","flag_store","prefix","handlers","opt","tokens","baseIndentString","create_flags","flags_base","next_indent_level","indentation_level","just_added_newline","line_indent_level","parent","last_text","last_word","declaration_statement","declaration_assignment","inline_frame","if_block","else_block","do_block","do_while","import_block","in_case_statement","in_case","case_body","get_line_number","ternary_depth","TK_START_EXPR","start_of_statement","handle_whitespace_and_comments","next_mode","text","line_starters","space_before_token","set_mode","print_token","indent","space_in_paren","is_array","keep_array_indentation","print_newline","allow_wrap_or_preserved_newline","wanted_newline","space_after_anon_function","space_before_conditional","start_of_object_property","TK_END_EXPR","restore_mode","space_in_empty_paren","TK_START_BLOCK","next_token","get_token","second_token","type","empty_anonymous_function","comments_before","brace_preserve_inline","index","check_token","opened","brace_style","is_special_word","TK_END_BLOCK","empty_braces","TK_WORD","handle_word","TK_RESERVED","TK_SEMICOLON","TK_STRING","TK_EQUALS","TK_OPERATOR","isGeneratorAsterisk","isUnary","operator_position","space_before","space_after","in_ternary","preserve_newlines","positionable_operators","isColon","isTernaryColon","isOtherColon","after_newline","is_expression","TK_COMMA","comma_first","TK_BLOCK_COMMENT","preserve_statement_flags","raw","add_raw_token","directives","preserve","test_output_raw","j","lines","out","idx","indexOf","substring","javadoc","starless","lastIndent","whitespace_before","lastIndentLength","charAt","slice","line","add_token","TK_COMMENT","TK_DOT","break_chained_methods","TK_UNKNOWN","TK_EOF","braces_on_own_line","brace_style_split","split","bs","indent_size","parseInt","indent_char","eol","unindent_chained_methods","max_preserve_newlines","jslint_happy","unescape_strings","wrap_line_length","e4x","end_with_newline","opPosition","indent_with_tabs","match","preindent_index","local_token","newlines","keep_whitespace","temp_token","h","beautify","tokenize","get_code","newline_restricted_tokens","force_linewrap","shouldPreserveOrForce","shouldPrintOperatorNewline","current_line","get_character_count","force_newline","add_new_line","print_token_line_indentation","set_indent","printable_token","previous_line","last","popped","pop","is_empty","word","offset","just_added_blankline","InputScanner","input","_input","_input_length","_position","back","hasNext","next","val","peek","peekCharCode","charCodeAt","pattern","lastIndex","testChar","pattern_match","exec","allOptions","targetType","finalOpts","indent_cache","baseIndentLength","indent_length","add_outputline","_character_count","_indent_count","_items","_empty","level","item","toString","join","sweet_code","token","add_space_before_token","output_length","eat_newlines","Token","comments_after","input_string","opts","whitespace","digit","digit_bin","digit_oct","digit_hex","punct","n_newlines","whitespace_before_token","in_html_comment","reserved_words","block_comment_pattern","comment_pattern","directives_block_pattern","directive_pattern","directives_end_ignore_pattern","template_pattern","tokenize_next","resulting_string","whitespace_on_this_line","last_token","allow_decimal","allow_e","local_digit","comment","directive_match","ignore","startXmlRegExp","sep","esc","has_char_escapes","in_char_class","xmlRegExp","xmlStr","rootTag","isCurlyRoot","depth","isEndTag","tagName","parse_string","delimiter","allow_unescaped_newlines","start_sub","current_char","escaped","input_scan","matched","sharp","template_match","token_values","open","open_stack","comments","css_beautify","source_text","newlinesFromLastWSEat","indentSize","indentCharacter","selectorSeparatorNewline","selector_separator_newline","newline_between_rules","space_around_combinator","space_around_selector_separator","ch","whiteRe","pos","parenLevel","skipWhitespace","prev_pos","eatWhitespace","eatString","endChars","start","peekString","endChar","str","preserve_newlines_local","eatComment","singleLine","lookBack","toLowerCase","foundNestedPseudoClass","openParen","indentLevel","nestedLevel","singleIndent","print_string","output_string","preserveSingleSpace","isAfterSpace","insideRule","insidePropertyValue","enteringConditionalGroup","top_ch","last_top_ch","isAfterNewline","header","variableOrRule","NESTED_AT_RULE","CONDITIONAL_GROUP_RULE","@page","@font-face","@keyframes","@media","@supports","@document","repeat","character","count","blockElements","isBlock","node","nodeName","voidElements","isVoid","voidSelector","rules","Rules","_keep","_remove","blankRule","replacement","blankReplacement","keepReplacement","defaultRule","defaultReplacement","findRule","rule","filterValue","filter","isArray","TypeError","remove","nextSibling","parentNode","removeChild","prev","current","isPre","firstChild","paragraph","content","br","heading","hLevel","Number","headingStyle","blockquote","lastElementChild","listItem","bulletListMarker","getAttribute","children","indentedCodeBlock","codeBlockStyle","textContent","fencedCodeBlock","language","className","fence","horizontalRule","hr","inlineLink","linkStyle","referenceLink","reference","linkReferenceStyle","id","references","append","emphasis","emDelimiter","strong","strongDelimiter","hasSiblings","previousSibling","isCodeBlock","leadingSpace","trailingSpace","matches","image","alt","src","add","unshift","keep","forNode","isBlank","forEach","fn","_htmlParser","root","window","HTMLParser","Parser","DOMParser","canParse","parseFromString","JSDOM","string","document","isFlankedByWhitespace","side","sibling","regExp","isFlanked","nodeType","nodeValue","reduce","leadingNewLinesRegExp","trailingNewLinesRegExp","escapes","TurndownService","defaults","outerHTML","destination","self","childNodes","isCode","querySelector","flankingWhitespace","leading","trailing","hasLeading","hasTrailing","escape","string1","string2","separator","sort","maxNewlines","turndown","element","prevText","prevVoid","data","substr","nextNode","getElementById","cloneNode","use","plugin","addRule","accumulator","absolute_1","isRelativeUrl","convertHtmlToAbsoluteLinkHTML","html","template","createElement","innerHTML","fragment","querySelectorAll","ele","setAttribute","relative_1","isAbsoluteURL","convertHtmlToRelativeLinkHTML","root_relative_1","convertHtmlToRootRelativeLinkHTML","convertHtmlToCommonmarkMarkdown","turndown_plugin_gfm_1","convertHtmlToGfmMarkdown","gfm","__webpack_exports__","taskListItems","highlightRegExp","highlightedCodeBlock","turndownService","strikethrough","every","isHeadingRow","tr","cell","tables","rows","checked","tableCell","tableRow","borderCells","alignMap","left","right","center","border","align","table","tableSection","convertHtmlToGhostMarkdown","freeGlobal","global","punycode","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","regexPunycode","regexNonASCII","regexSeparators","errors","overflow","not-basic","invalid-input","baseMinusTMin","floor","Math","stringFromCharCode","error","RangeError","map","mapDomain","parts","ucs2decode","extra","counter","ucs2encode","basicToDigit","codePoint","digitToBasic","flag","adapt","delta","numPoints","firstTime","k","decode","basic","oldi","w","baseMinusT","inputLength","bias","lastIndexOf","splice","encode","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","ucs2","toASCII","toUnicode","TAB_URL_TO_PLAIN","TAB_URL_TO_MARKDOWN","TAB_URL_TO_HTML","TAB_URL_TO_BBCODE","FRAME_URL_TO_PLAIN","FRAME_URL_TO_MARKDOWN","FRAME_URL_TO_HTML","FRAME_URL_TO_BBCODE","LINK_TO_MARKDOWN","LINK_TO_HTML","LINK_TO_BBCODE","SELECTION_TO_MARKDOWN","SELECTION_TO_HTML","SELECTION_TO_HTML_ONLY_A_TAG","SELECTION_TO_HTML_NO_ATTR","SELECTION_TO_BBCODE","SELECTION_TO_PLAIN","SELECTION_TO_PLAIN_TRIMMED","SELECTION_TO_RAW_STRING","IMAGE_TO_MARKDOWN","IMAGE_TO_MARKDOWN_DATA_URI_JPEG","IMAGE_TO_MARKDOWN_DATA_URI_PNG","IMAGE_TO_MARKDOWN_DATA_URI_WEBP","IMAGE_TO_HTML","IMAGE_TO_HTML_DATA_URI_JPEG","IMAGE_TO_HTML_DATA_URI_PNG","IMAGE_TO_HTML_DATA_URI_WEBP","IMAGE_TO_BBCODE","IMAGE_TO_DATA_URI_RAW","IMAGE_TO_DATA_URI_JPEG","IMAGE_TO_DATA_URI_PNG","IMAGE_TO_DATA_URI_WEBP","AUDIO_TO_HTML","VIDEO_TO_HTML","handlers_1","menus_1","async","writeTextToClipboard","navigator","clipboard","writeText","textarea","body","appendChild","select","execCommand","onInstalled","invalidList","tabs","query","invalid","startsWith","manifest","file","content_scripts","js","executeScript","allFrames","matchAboutBlank","runAt","contextMenus","onClicked","info","tab","menuItemId","commands","onCommand","currentWindow","active","command","removeAll","contexts","items","entries","i18n","getMessage","api_1","converters_1","symbols_1","[object Object]","convertUrlToLinkPlain","convertUrlToLinkMarkdown","convertUrlToLinkHTML","convertUrlToLinkBBCode","frameUrl","convertUrlToFormattedURL","getDocumentTitle","frameId","linkUrl","getActiveElementContent","convertMarkdownToBeautifyMarkdown","convertHtmlToMarkdown","convertHtmlToBeautifyHTML","convertHtmlToSafeHTML","linkText","convertHtmlToBBCode","mediaType","srcUrl","convertUrlToImageMarkdown","convertUrlToImageDataURI","convertUrlToImageHTML","convertUrlToImageBBCode","convertUrlToAudioHTML","convertUrlToVideoHTML","getSelectionHTML","pageUrl","convertHtmlToFormattedLinkHTML","convertHtmlToOnlyATagHTML","convertHtmlToNoAttrHTML","getSelectionText","convertTextToTrimmedText","convertTextToRawString","tabId","sendMessage","__export","format","Promise","resolve","reject","img","Image","onload","canvas","width","naturalWidth","height","naturalHeight","getContext","drawImage","toDataURL","onerror","blob","fetch","then","res","reader","FileReader","onloadend","readAsDataURL","configure_1","normalizeArray","allowAboveRoot","up","splitPathRe","splitPath","filename","xs","f","resolvedPath","resolvedAbsolute","path","normalize","isAbsolute","trailingSlash","paths","from","to","end","fromParts","toParts","min","samePartsLength","outputParts","dirname","basename","ext","extname","__WEBPACK_AMD_DEFINE_ARRAY__","html_beautify","css","style_html","rtrim","html_source","multi_parser","indent_inner_html","indent_body_inner_html","indent_head_inner_html","indent_character","unformatted","content_unformatted","indent_handlebars","wrap_attributes","wrap_attributes_indent_size","is_wrap_attributes_force","is_wrap_attributes_force_expand_multiline","is_wrap_attributes_force_aligned","extra_liners","max_char","isNaN","current_mode","tags","parentcount","parent1","tag_type","token_text","token_type","indent_content","Utils","single_token","void_elements","is_whitespace","traverse_whitespace","input_char","space_or_wrap","line_char_count","print_indentation","get_content","handlebarsStarted","peek3","get_tag","get_contents_to","reg_match","reg_array","end_script","record_tag","tag","indent_level","retrieve_tag","temp_parent","indent_to_tag","tag_start","tag_start_char","tail","space","first_attr","has_wrapped_attrs","orig_pos","orig_line_char_count","is_tag_closed","get_unformatted","indentAttrs","force_first_attr_wrap","alignment_size","get_comment","tag_index","tag_offset","tag_complete","tag_check","is_unformatted","search","start_pos","orig_tag","delimiterMatcher","newToken","doesNotMatch","get_full_indent","printer","js_source","force","print_token_raw","unindent","tag_name","tag_extracted_from_last_output","foundIfOnCurrentLine","lastCheckedOutput","_beautifier","script_indent_level","indent_scripts","indentation","Child_options","child_options","_level","reindent","requireamd","attr","attributes","removeAttribute","treeWalker","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","container","currentNode","Node","TEXT_NODE","ELEMENT_NODE","commonmark_1","gfm_1","ghost_1","html2bbcode_1","HTML2BBCode","feed","html2bbcode","HTMLTag","HTMLStack","stack","duptags","headingtags","selfendtags","newlinetags","noemptytags","noemptyattrtags","findquoteend","script","multiline","findscriptend","freg","qi","quote","quotation","parseStyle","style","ss","r_style","err","parseAttributes","blank","lastkey","invalue","r_attr","add_attr","v","b","tagheadend","selfend","sattr","attrlen","that","add_content","hstack","script_len","i_tagend","t_start","t_tagheadend","lasttagend","push_plaintext","t_i","dupRegex","nlsRegex","nleRegex","empRegex","minify","preRegex","endPreRegex","emptyRegex","newHtml","preMarkIndex","unescapeMap","nbsp","amp","lt","gt","quot","BBCode","weaknewline","unescape","nonbsp","replaceRegexp","m1","dedup","ts","strip","afternewline","blanks","stag","anl","new_stack","new_len","exists","k1","showtree","console","log","maps","a","section","empty","em","del","ins","u","ul","ol","li","pre","font","extend","span","color","size","face","h1","h2","h3","h4","h5","h6","div","!doctype","head","meta","link","solidify","_append","st","close","rollback","c1Regex","pad2","g","px2size","transsize","px","convertStyle","htag","sec","att","bbs","addbb","tsec","ra","imagescale","w1","noalign","nolist","noheadings","headings2size","hi","convert","bbcode","recursive","hs","fnewline","debug","definition","convertHtmlToPlainText","ent","convertTextToDecodeEntitiesText","revEntities","numeric","named","special","\"","'","<",">","&","codePoints","chars","cc","webpackPolyfill","deprecate","Function","eval","entities","_","hasSemi","withoutSemi","target","markdown","trimRight","Map"],"mappings":"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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","export type UrlFormat = 'original'|'absolute'|'relative'|'root-relative'\nexport type MarkdownFlavor = 'commonmark'|'gfm'|'ghost'\n\nexport interface Config {\n  version: string\n  urlFormat: UrlFormat\n  markdownFlavor: MarkdownFlavor\n}\n\nfunction createDefaultConfig(): Config {\n  return {\n    version: browser.runtime.getManifest().version\n  , urlFormat: 'absolute'\n  , markdownFlavor: 'gfm'\n  }\n}\n\nexport function loadConfigure(): Config {\n  const config = localStorage.getItem('config')\n  if (config) {\n    return JSON.parse(config)\n  }\n  return createDefaultConfig()\n}\n\nexport function saveConfigure(config: Config) {\n  config = {\n    ...createDefaultConfig()\n  , ...config\n  }\n  localStorage.setItem('config', JSON.stringify(config))\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","export function convertUrlToAbsoluteURL(relativeUrl: string, baseUrl: string): string {\n  try {\n    return new URL(relativeUrl, baseUrl).href\n  } catch (e) {\n    return relativeUrl\n  }\n}\n\nexport default convertUrlToAbsoluteURL\n","import { relative } from 'path'\n\nexport function convertUrlToRelativeURL(absoluteUrl: string, baseUrl: string): string {\n  try {\n    const absoluteUrlObj = new URL(absoluteUrl)\n    const baseUrlObj = new URL(baseUrl)\n    if (absoluteUrlObj.origin === baseUrlObj.origin) {\n      return relative(baseUrlObj.pathname, absoluteUrlObj.pathname)\n    } else {\n      return absoluteUrl\n    }\n  } catch (e) {\n    return absoluteUrl\n  }\n}\n\nexport default convertUrlToRelativeURL\n","export function convertUrlToRootRelativeURL(url: string, baseUrl: string): string {\n  try {\n    const urlObj = new URL(url, baseUrl)\n    const baseUrlObj = new URL(baseUrl)\n    if (urlObj.origin === baseUrlObj.origin) {\n      return urlObj.pathname\n    } else {\n      return url\n    }\n  } catch (e) {\n    return url\n  }\n}\n\nexport default convertUrlToRootRelativeURL\n","/*jshint curly:false, eqeqeq:true, laxbreak:true, noempty:false */\n/* AUTO-GENERATED. DO NOT MODIFY. */\n/* see js/src/javascript/index.js */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n JS Beautifier\n---------------\n\n\n  Written by Einar Lielmanis, <einar@jsbeautifier.org>\n      http://jsbeautifier.org/\n\n  Originally converted to javascript by Vital, <vital76@gmail.com>\n  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>\n\n\n  Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy        !jslint_happy\n            ---------------------------------\n            function ()         function()\n\n            switch () {         switch() {\n            case 1:               case 1:\n              break;                break;\n            }                   }\n\n    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\" | any of the former + \",preserve-inline\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n            preserve-inline will try to preserve inline blocks of curly braces\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n                be preserved if it were present.\n\n    end_with_newline (default false)  - end output with a newline\n\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n\n*/\n\n(function() {\nvar legacy_beautify_js =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/* jshint curly: false */\n// This section of code is taken from acorn.\n//\n// Acorn was written by Marijn Haverbeke and released under an MIT\n// license. The Unicode regexps (for identifiers and whitespace) were\n// taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n// Whether a single character denotes a newline.\n\nexports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n// in javascript, these two differ\n// in python they are the same, different methods are called on them\nexports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\nexports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n// Test whether a given character code starts an identifier.\n\nexports.isIdentifierStart = function(code) {\n    // permit $ (36) and @ (64). @ is used in ES7 decorators.\n    if (code < 65) return code === 36 || code === 64;\n    // 65 through 91 are uppercase letters.\n    if (code < 91) return true;\n    // permit _ (95).\n    if (code < 97) return code === 95;\n    // 97 through 123 are lowercase letters.\n    if (code < 123) return true;\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n};\n\n// Test whether a given character is part of an identifier.\n\nexports.isIdentifierChar = function(code) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar mergeOpts = __webpack_require__(3).mergeOpts;\nvar acorn = __webpack_require__(0);\nvar Output = __webpack_require__(4).Output;\nvar Tokenizer = __webpack_require__(7).Tokenizer;\n\nfunction remove_redundant_indentation(output, frame) {\n    // This implementation is effective but has some issues:\n    //     - can cause line wrap to happen too soon due to indent removal\n    //           after wrap points are calculated\n    // These issues are minor compared to ugly indentation.\n\n    if (frame.multiline_frame ||\n        frame.mode === MODE.ForInitializer ||\n        frame.mode === MODE.Conditional) {\n        return;\n    }\n\n    // remove one indent from each line inside this section\n    var start_index = frame.start_line_index;\n\n    output.remove_indent(start_index);\n}\n\nfunction in_array(what, arr) {\n    for (var i = 0; i < arr.length; i += 1) {\n        if (arr[i] === what) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction trim(s) {\n    return s.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction ltrim(s) {\n    return s.replace(/^\\s+/g, '');\n}\n\n// function rtrim(s) {\n//     return s.replace(/\\s+$/g, '');\n// }\n\n\nfunction generateMapFromStrings(list) {\n    var result = {};\n    for (var x = 0; x < list.length; x++) {\n        // make the mapped names underscored instead of dash\n        result[list[x].replace(/-/g, '_')] = list[x];\n    }\n    return result;\n}\n\nfunction sanitizeOperatorPosition(opPosition) {\n    opPosition = opPosition || OPERATOR_POSITION.before_newline;\n\n    if (!in_array(opPosition, validPositionValues)) {\n        throw new Error(\"Invalid Option Value: The option 'operator_position' must be one of the following values\\n\" +\n            validPositionValues +\n            \"\\nYou passed in: '\" + opPosition + \"'\");\n    }\n\n    return opPosition;\n}\n\nvar validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];\n\n// Generate map from array\nvar OPERATOR_POSITION = generateMapFromStrings(validPositionValues);\n\nvar OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n\nvar MODE = {\n    BlockStatement: 'BlockStatement', // 'BLOCK'\n    Statement: 'Statement', // 'STATEMENT'\n    ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n    ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n    ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n    Conditional: 'Conditional', //'(COND-EXPRESSION)',\n    Expression: 'Expression' //'(EXPRESSION)'\n};\n\nfunction Beautifier(js_source_text, options) {\n    \"use strict\";\n    var output;\n    var tokens = [],\n        token_pos;\n    var tokenizer;\n    var current_token;\n    var last_type, last_last_text, indent_string;\n    var flags, previous_flags, flag_store;\n    var prefix;\n\n    var handlers, opt;\n    var baseIndentString = '';\n\n    handlers = {\n        'TK_START_EXPR': handle_start_expr,\n        'TK_END_EXPR': handle_end_expr,\n        'TK_START_BLOCK': handle_start_block,\n        'TK_END_BLOCK': handle_end_block,\n        'TK_WORD': handle_word,\n        'TK_RESERVED': handle_word,\n        'TK_SEMICOLON': handle_semicolon,\n        'TK_STRING': handle_string,\n        'TK_EQUALS': handle_equals,\n        'TK_OPERATOR': handle_operator,\n        'TK_COMMA': handle_comma,\n        'TK_BLOCK_COMMENT': handle_block_comment,\n        'TK_COMMENT': handle_comment,\n        'TK_DOT': handle_dot,\n        'TK_UNKNOWN': handle_unknown,\n        'TK_EOF': handle_eof\n    };\n\n    function create_flags(flags_base, mode) {\n        var next_indent_level = 0;\n        if (flags_base) {\n            next_indent_level = flags_base.indentation_level;\n            if (!output.just_added_newline() &&\n                flags_base.line_indent_level > next_indent_level) {\n                next_indent_level = flags_base.line_indent_level;\n            }\n        }\n\n        var next_flags = {\n            mode: mode,\n            parent: flags_base,\n            last_text: flags_base ? flags_base.last_text : '', // last token text\n            last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n            declaration_statement: false,\n            declaration_assignment: false,\n            multiline_frame: false,\n            inline_frame: false,\n            if_block: false,\n            else_block: false,\n            do_block: false,\n            do_while: false,\n            import_block: false,\n            in_case_statement: false, // switch(..){ INSIDE HERE }\n            in_case: false, // we're on the exact line with \"case 0:\"\n            case_body: false, // the indented case-action block\n            indentation_level: next_indent_level,\n            line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n            start_line_index: output.get_line_number(),\n            ternary_depth: 0\n        };\n        return next_flags;\n    }\n\n    // Some interpreters have unexpected results with foo = baz || bar;\n    options = options ? options : {};\n\n    // Allow the setting of language/file-type specific options\n    // with inheritance of overall settings\n    options = mergeOpts(options, 'js');\n\n    opt = {};\n\n    // compatibility, re\n    if (options.brace_style === \"expand-strict\") { //graceful handling of deprecated option\n        options.brace_style = \"expand\";\n    } else if (options.brace_style === \"collapse-preserve-inline\") { //graceful handling of deprecated option\n        options.brace_style = \"collapse,preserve-inline\";\n    } else if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n        options.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n    } else if (!options.brace_style) { //Nothing exists to set it\n        options.brace_style = \"collapse\";\n    }\n\n    //preserve-inline in delimited string will trigger brace_preserve_inline, everything\n    //else is considered a brace_style and the last one only will have an effect\n    var brace_style_split = options.brace_style.split(/[^a-zA-Z0-9_\\-]+/);\n    opt.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option\n    opt.brace_style = \"collapse\";\n    for (var bs = 0; bs < brace_style_split.length; bs++) {\n        if (brace_style_split[bs] === \"preserve-inline\") {\n            opt.brace_preserve_inline = true;\n        } else {\n            opt.brace_style = brace_style_split[bs];\n        }\n    }\n\n    opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n    opt.indent_char = options.indent_char ? options.indent_char : ' ';\n    opt.eol = options.eol ? options.eol : 'auto';\n    opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n    opt.unindent_chained_methods = (options.unindent_chained_methods === undefined) ? false : options.unindent_chained_methods;\n    opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n    opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n    opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n    opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n    opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n    opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n    opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n    opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n    opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n    opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n    opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n    opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n    opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n    opt.operator_position = sanitizeOperatorPosition(options.operator_position);\n\n    // For testing of beautify ignore:start directive\n    opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\n    // force opt.space_after_anon_function to true if opt.jslint_happy\n    if (opt.jslint_happy) {\n        opt.space_after_anon_function = true;\n    }\n\n    if (options.indent_with_tabs) {\n        opt.indent_char = '\\t';\n        opt.indent_size = 1;\n    }\n\n    if (opt.eol === 'auto') {\n        opt.eol = '\\n';\n        if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {\n            opt.eol = js_source_text.match(acorn.lineBreak)[0];\n        }\n    }\n\n    opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n    //----------------------------------\n    indent_string = '';\n    while (opt.indent_size > 0) {\n        indent_string += opt.indent_char;\n        opt.indent_size -= 1;\n    }\n\n    var preindent_index = 0;\n    if (js_source_text && js_source_text.length) {\n        while ((js_source_text.charAt(preindent_index) === ' ' ||\n                js_source_text.charAt(preindent_index) === '\\t')) {\n            preindent_index += 1;\n        }\n        baseIndentString = js_source_text.substring(0, preindent_index);\n        js_source_text = js_source_text.substring(preindent_index);\n    }\n\n    last_type = 'TK_START_BLOCK'; // last token type\n    last_last_text = ''; // pre-last token text\n    output = new Output(indent_string, baseIndentString);\n\n    // If testing the ignore directive, start with output disable set to true\n    output.raw = opt.test_output_raw;\n\n\n    // Stack of parsing/formatting states, including MODE.\n    // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n    // and formatted output.  This makes the beautifier less accurate than full parsers\n    // but also far more tolerant of syntax errors.\n    //\n    // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n    // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n    // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n    // most full parsers would die, but the beautifier gracefully falls back to\n    // MODE.BlockStatement and continues on.\n    flag_store = [];\n    set_mode(MODE.BlockStatement);\n\n    this.beautify = function() {\n\n        /*jshint onevar:true */\n        var sweet_code;\n        tokenizer = new Tokenizer(js_source_text, opt, indent_string);\n        tokens = tokenizer.tokenize();\n        token_pos = 0;\n\n        current_token = get_token();\n        while (current_token) {\n            handlers[current_token.type]();\n\n            last_last_text = flags.last_text;\n            last_type = current_token.type;\n            flags.last_text = current_token.text;\n\n            token_pos += 1;\n            current_token = get_token();\n        }\n\n        sweet_code = output.get_code(opt.end_with_newline, opt.eol);\n\n        return sweet_code;\n    };\n\n    function handle_whitespace_and_comments(local_token, preserve_statement_flags) {\n        var newlines = local_token.newlines;\n        var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n        var temp_token = current_token;\n\n        for (var h = 0; h < local_token.comments_before.length; h++) {\n            // The cleanest handling of inline comments is to treat them as though they aren't there.\n            // Just continue formatting and the behavior should be logical.\n            // Also ignore unknown tokens.  Again, this should result in better behavior.\n            current_token = local_token.comments_before[h];\n            handle_whitespace_and_comments(current_token, preserve_statement_flags);\n            handlers[current_token.type](preserve_statement_flags);\n        }\n        current_token = temp_token;\n\n        if (keep_whitespace) {\n            for (var i = 0; i < newlines; i += 1) {\n                print_newline(i > 0, preserve_statement_flags);\n            }\n        } else {\n            if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n                newlines = opt.max_preserve_newlines;\n            }\n\n            if (opt.preserve_newlines) {\n                if (local_token.newlines > 1) {\n                    print_newline(false, preserve_statement_flags);\n                    for (var j = 1; j < newlines; j += 1) {\n                        print_newline(true, preserve_statement_flags);\n                    }\n                }\n            }\n        }\n\n    }\n\n    // we could use just string.split, but\n    // IE doesn't like returning empty strings\n    function split_linebreaks(s) {\n        //return s.split(/\\x0d\\x0a|\\x0a/);\n\n        s = s.replace(acorn.allLineBreaks, '\\n');\n        var out = [],\n            idx = s.indexOf(\"\\n\");\n        while (idx !== -1) {\n            out.push(s.substring(0, idx));\n            s = s.substring(idx + 1);\n            idx = s.indexOf(\"\\n\");\n        }\n        if (s.length) {\n            out.push(s);\n        }\n        return out;\n    }\n\n    var newline_restricted_tokens = ['break', 'continue', 'return', 'throw', 'yield'];\n\n    function allow_wrap_or_preserved_newline(force_linewrap) {\n        force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n        // Never wrap the first token on a line\n        if (output.just_added_newline()) {\n            return;\n        }\n\n        var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;\n        var operatorLogicApplies = in_array(flags.last_text, tokenizer.positionable_operators) || in_array(current_token.text, tokenizer.positionable_operators);\n\n        if (operatorLogicApplies) {\n            var shouldPrintOperatorNewline = (\n                    in_array(flags.last_text, tokenizer.positionable_operators) &&\n                    in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)\n                ) ||\n                in_array(current_token.text, tokenizer.positionable_operators);\n            shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n        }\n\n        if (shouldPreserveOrForce) {\n            print_newline(false, true);\n        } else if (opt.wrap_line_length) {\n            if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {\n                // These tokens should never have a newline inserted\n                // between them and the following expression.\n                return;\n            }\n            var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n                (output.space_before_token ? 1 : 0);\n            if (proposed_line_length >= opt.wrap_line_length) {\n                print_newline(false, true);\n            }\n        }\n    }\n\n    function print_newline(force_newline, preserve_statement_flags) {\n        if (!preserve_statement_flags) {\n            if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {\n                var next_token = get_token(1);\n                while (flags.mode === MODE.Statement &&\n                    !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&\n                    !flags.do_block) {\n                    restore_mode();\n                }\n            }\n        }\n\n        if (output.add_new_line(force_newline)) {\n            flags.multiline_frame = true;\n        }\n    }\n\n    function print_token_line_indentation() {\n        if (output.just_added_newline()) {\n            if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {\n                output.current_line.push(current_token.whitespace_before);\n                output.space_before_token = false;\n            } else if (output.set_indent(flags.indentation_level)) {\n                flags.line_indent_level = flags.indentation_level;\n            }\n        }\n    }\n\n    function print_token(printable_token) {\n        if (output.raw) {\n            output.add_raw_token(current_token);\n            return;\n        }\n\n        if (opt.comma_first && last_type === 'TK_COMMA' &&\n            output.just_added_newline()) {\n            if (output.previous_line.last() === ',') {\n                var popped = output.previous_line.pop();\n                // if the comma was already at the start of the line,\n                // pull back onto that line and reprint the indentation\n                if (output.previous_line.is_empty()) {\n                    output.previous_line.push(popped);\n                    output.trim(true);\n                    output.current_line.pop();\n                    output.trim();\n                }\n\n                // add the comma in front of the next token\n                print_token_line_indentation();\n                output.add_token(',');\n                output.space_before_token = true;\n            }\n        }\n\n        printable_token = printable_token || current_token.text;\n        print_token_line_indentation();\n        output.add_token(printable_token);\n    }\n\n    function indent() {\n        flags.indentation_level += 1;\n    }\n\n    function deindent() {\n        if (flags.indentation_level > 0 &&\n            ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {\n            flags.indentation_level -= 1;\n\n        }\n    }\n\n    function set_mode(mode) {\n        if (flags) {\n            flag_store.push(flags);\n            previous_flags = flags;\n        } else {\n            previous_flags = create_flags(null, mode);\n        }\n\n        flags = create_flags(previous_flags, mode);\n    }\n\n    function is_array(mode) {\n        return mode === MODE.ArrayLiteral;\n    }\n\n    function is_expression(mode) {\n        return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n    }\n\n    function restore_mode() {\n        if (flag_store.length > 0) {\n            previous_flags = flags;\n            flags = flag_store.pop();\n            if (previous_flags.mode === MODE.Statement && !opt.unindent_chained_methods) {\n                remove_redundant_indentation(output, previous_flags);\n            }\n        }\n    }\n\n    function start_of_object_property() {\n        return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n            (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));\n    }\n\n    function start_of_statement() {\n        if (\n            (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||\n            (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||\n            (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens) && !current_token.wanted_newline) ||\n            (last_type === 'TK_RESERVED' && flags.last_text === 'else' &&\n                !(current_token.type === 'TK_RESERVED' && current_token.text === 'if' && !current_token.comments_before.length)) ||\n            (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||\n            (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&\n                !flags.in_case &&\n                !(current_token.text === '--' || current_token.text === '++') &&\n                last_last_text !== 'function' &&\n                current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||\n            (flags.mode === MODE.ObjectLiteral && (\n                (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))\n        ) {\n\n            set_mode(MODE.Statement);\n            if (!opt.unindent_chained_methods) {\n                indent();\n            }\n\n            handle_whitespace_and_comments(current_token, true);\n\n            // Issue #276:\n            // If starting a new statement with [if, for, while, do], push to a new line.\n            // if (a) if (b) if(c) d(); else e(); else f();\n            if (!start_of_object_property()) {\n                allow_wrap_or_preserved_newline(\n                    current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    function all_lines_start_with(lines, c) {\n        for (var i = 0; i < lines.length; i++) {\n            var line = trim(lines[i]);\n            if (line.charAt(0) !== c) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function each_line_matches_indent(lines, indent) {\n        var i = 0,\n            len = lines.length,\n            line;\n        for (; i < len; i++) {\n            line = lines[i];\n            // allow empty lines to pass through\n            if (line && line.indexOf(indent) !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function is_special_word(word) {\n        return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n    }\n\n    function get_token(offset) {\n        var index = token_pos + (offset || 0);\n        return (index < 0 || index >= tokens.length) ? null : tokens[index];\n    }\n\n    function handle_start_expr() {\n        // The conditional starts the statement if appropriate.\n        if (!start_of_statement()) {\n            handle_whitespace_and_comments(current_token);\n        }\n\n        var next_mode = MODE.Expression;\n        if (current_token.text === '[') {\n\n            if (last_type === 'TK_WORD' || flags.last_text === ')') {\n                // this is array index specifier, break immediately\n                // a[x], fn()[x]\n                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, tokenizer.line_starters)) {\n                    output.space_before_token = true;\n                }\n                set_mode(next_mode);\n                print_token();\n                indent();\n                if (opt.space_in_paren) {\n                    output.space_before_token = true;\n                }\n                return;\n            }\n\n            next_mode = MODE.ArrayLiteral;\n            if (is_array(flags.mode)) {\n                if (flags.last_text === '[' ||\n                    (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n                    // ], [ goes to new line\n                    // }, [ goes to new line\n                    if (!opt.keep_array_indentation) {\n                        print_newline();\n                    }\n                }\n            }\n\n        } else {\n            if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {\n                next_mode = MODE.ForInitializer;\n            } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {\n                next_mode = MODE.Conditional;\n            } else {\n                // next_mode = MODE.Expression;\n            }\n        }\n\n        if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {\n            print_newline();\n        } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {\n            // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n            allow_wrap_or_preserved_newline(current_token.wanted_newline);\n            // do nothing on (( and )( and ][ and ]( and .(\n        } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n            output.space_before_token = true;\n        } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n            (flags.last_text === '*' &&\n                (in_array(last_last_text, ['function', 'yield']) ||\n                    (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n            // function() vs function ()\n            // yield*() vs yield* ()\n            // function*() vs function* ()\n            if (opt.space_after_anon_function) {\n                output.space_before_token = true;\n            }\n        } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, tokenizer.line_starters) || flags.last_text === 'catch')) {\n            if (opt.space_before_conditional) {\n                output.space_before_token = true;\n            }\n        }\n\n        // Should be a space between await and an IIFE, or async and an arrow function\n        if (current_token.text === '(' && last_type === 'TK_RESERVED' && in_array(flags.last_word, ['await', 'async'])) {\n            output.space_before_token = true;\n        }\n\n        // Support of this kind of newline preservation.\n        // a = (b &&\n        //     (c || d));\n        if (current_token.text === '(') {\n            if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                if (!start_of_object_property()) {\n                    allow_wrap_or_preserved_newline();\n                }\n            }\n        }\n\n        // Support preserving wrapped arrow function expressions\n        // a.b('c',\n        //     () => d.e\n        // )\n        if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {\n            allow_wrap_or_preserved_newline();\n        }\n\n        set_mode(next_mode);\n        print_token();\n        if (opt.space_in_paren) {\n            output.space_before_token = true;\n        }\n\n        // In all cases, if we newline while inside an expression it should be indented.\n        indent();\n    }\n\n    function handle_end_expr() {\n        // statements inside expressions are not valid syntax, but...\n        // statements must all be closed when their container closes\n        while (flags.mode === MODE.Statement) {\n            restore_mode();\n        }\n\n        handle_whitespace_and_comments(current_token);\n\n        if (flags.multiline_frame) {\n            allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n        }\n\n        if (opt.space_in_paren) {\n            if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {\n                // () [] no inner space in empty parens like these, ever, ref #320\n                output.trim();\n                output.space_before_token = false;\n            } else {\n                output.space_before_token = true;\n            }\n        }\n        if (current_token.text === ']' && opt.keep_array_indentation) {\n            print_token();\n            restore_mode();\n        } else {\n            restore_mode();\n            print_token();\n        }\n        remove_redundant_indentation(output, previous_flags);\n\n        // do {} while () // no statement required after\n        if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n            previous_flags.mode = MODE.Expression;\n            flags.do_block = false;\n            flags.do_while = false;\n\n        }\n    }\n\n    function handle_start_block() {\n        handle_whitespace_and_comments(current_token);\n\n        // Check if this is should be treated as a ObjectLiteral\n        var next_token = get_token(1);\n        var second_token = get_token(2);\n        if (second_token && (\n                (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||\n                (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))\n            )) {\n            // We don't support TypeScript,but we didn't break it for a very long time.\n            // We'll try to keep not breaking it.\n            if (!in_array(last_last_text, ['class', 'interface'])) {\n                set_mode(MODE.ObjectLiteral);\n            } else {\n                set_mode(MODE.BlockStatement);\n            }\n        } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {\n            // arrow function: (param1, paramN) => { statements }\n            set_mode(MODE.BlockStatement);\n        } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||\n            (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))\n        ) {\n            // Detecting shorthand function syntax is difficult by scanning forward,\n            //     so check the surrounding context.\n            // If the block is being returned, imported, export default, passed as arg,\n            //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n            set_mode(MODE.ObjectLiteral);\n        } else {\n            set_mode(MODE.BlockStatement);\n        }\n\n        var empty_braces = !next_token.comments_before.length && next_token.text === '}';\n        var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n            last_type === 'TK_END_EXPR';\n\n        if (opt.brace_preserve_inline) // check for inline, set inline_frame if so\n        {\n            // search forward for a newline wanted inside this block\n            var index = 0;\n            var check_token = null;\n            flags.inline_frame = true;\n            do {\n                index += 1;\n                check_token = get_token(index);\n                if (check_token.wanted_newline) {\n                    flags.inline_frame = false;\n                    break;\n                }\n            } while (check_token.type !== 'TK_EOF' &&\n                !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));\n        }\n\n        if ((opt.brace_style === \"expand\" ||\n                (opt.brace_style === \"none\" && current_token.wanted_newline)) &&\n            !flags.inline_frame) {\n            if (last_type !== 'TK_OPERATOR' &&\n                (empty_anonymous_function ||\n                    last_type === 'TK_EQUALS' ||\n                    (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n                output.space_before_token = true;\n            } else {\n                print_newline(false, true);\n            }\n        } else { // collapse || inline_frame\n            if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {\n                if (last_type === 'TK_COMMA' || opt.space_in_paren) {\n                    output.space_before_token = true;\n                }\n\n                if (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame)) {\n                    allow_wrap_or_preserved_newline();\n                    previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;\n                    flags.multiline_frame = false;\n                }\n            }\n            if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n                if (last_type === 'TK_START_BLOCK' && !flags.inline_frame) {\n                    print_newline();\n                } else {\n                    output.space_before_token = true;\n                }\n            }\n        }\n        print_token();\n        indent();\n    }\n\n    function handle_end_block() {\n        // statements must all be closed when their container closes\n        handle_whitespace_and_comments(current_token);\n\n        while (flags.mode === MODE.Statement) {\n            restore_mode();\n        }\n\n        var empty_braces = last_type === 'TK_START_BLOCK';\n\n        if (flags.inline_frame && !empty_braces) { // try inline_frame (only set if opt.braces-preserve-inline) first\n            output.space_before_token = true;\n        } else if (opt.brace_style === \"expand\") {\n            if (!empty_braces) {\n                print_newline();\n            }\n        } else {\n            // skip {}\n            if (!empty_braces) {\n                if (is_array(flags.mode) && opt.keep_array_indentation) {\n                    // we REALLY need a newline here, but newliner would skip that\n                    opt.keep_array_indentation = false;\n                    print_newline();\n                    opt.keep_array_indentation = true;\n\n                } else {\n                    print_newline();\n                }\n            }\n        }\n        restore_mode();\n        print_token();\n    }\n\n    function handle_word() {\n        if (current_token.type === 'TK_RESERVED') {\n            if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {\n                current_token.type = 'TK_WORD';\n            } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {\n                current_token.type = 'TK_WORD';\n            } else if (flags.mode === MODE.ObjectLiteral) {\n                var next_token = get_token(1);\n                if (next_token.text === ':') {\n                    current_token.type = 'TK_WORD';\n                }\n            }\n        }\n\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {\n                flags.declaration_statement = true;\n            }\n        } else if (current_token.wanted_newline && !is_expression(flags.mode) &&\n            (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&\n            last_type !== 'TK_EQUALS' &&\n            (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n            handle_whitespace_and_comments(current_token);\n            print_newline();\n        } else {\n            handle_whitespace_and_comments(current_token);\n        }\n\n        if (flags.do_block && !flags.do_while) {\n            if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {\n                // do {} ## while ()\n                output.space_before_token = true;\n                print_token();\n                output.space_before_token = true;\n                flags.do_while = true;\n                return;\n            } else {\n                // do {} should always have while as the next word.\n                // if we don't see the expected while, recover\n                print_newline();\n                flags.do_block = false;\n            }\n        }\n\n        // if may be followed by else, or not\n        // Bare/inline ifs are tricky\n        // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n        if (flags.if_block) {\n            if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {\n                flags.else_block = true;\n            } else {\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n                flags.if_block = false;\n                flags.else_block = false;\n            }\n        }\n\n        if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n            print_newline();\n            if (flags.case_body || opt.jslint_happy) {\n                // switch cases following one another\n                deindent();\n                flags.case_body = false;\n            }\n            print_token();\n            flags.in_case = true;\n            flags.in_case_statement = true;\n            return;\n        }\n\n        if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n            if (!start_of_object_property()) {\n                allow_wrap_or_preserved_newline();\n            }\n        }\n\n        if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {\n            if (in_array(flags.last_text, ['}', ';']) ||\n                (output.just_added_newline() && !(in_array(flags.last_text, ['(', '[', '{', ':', '=', ',']) || last_type === 'TK_OPERATOR'))) {\n                // make sure there is a nice clean space of at least one blank line\n                // before a new function definition\n                if (!output.just_added_blankline() && !current_token.comments_before.length) {\n                    print_newline();\n                    print_newline(true);\n                }\n            }\n            if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n                if (last_type === 'TK_RESERVED' && (\n                        in_array(flags.last_text, ['get', 'set', 'new', 'export', 'async']) ||\n                        in_array(flags.last_text, newline_restricted_tokens))) {\n                    output.space_before_token = true;\n                } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {\n                    output.space_before_token = true;\n                } else {\n                    print_newline();\n                }\n            } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {\n                // foo = function\n                output.space_before_token = true;\n            } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n                // (function\n            } else {\n                print_newline();\n            }\n\n            print_token();\n            flags.last_word = current_token.text;\n            return;\n        }\n\n        prefix = 'NONE';\n\n        if (last_type === 'TK_END_BLOCK') {\n\n            if (previous_flags.inline_frame) {\n                prefix = 'SPACE';\n            } else if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {\n                prefix = 'NEWLINE';\n            } else {\n                if (opt.brace_style === \"expand\" ||\n                    opt.brace_style === \"end-expand\" ||\n                    (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                    prefix = 'NEWLINE';\n                } else {\n                    prefix = 'SPACE';\n                    output.space_before_token = true;\n                }\n            }\n        } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {\n            // TODO: Should this be for STATEMENT as well?\n            prefix = 'NEWLINE';\n        } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n            prefix = 'SPACE';\n        } else if (last_type === 'TK_STRING') {\n            prefix = 'NEWLINE';\n        } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||\n            (flags.last_text === '*' &&\n                (in_array(last_last_text, ['function', 'yield']) ||\n                    (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n            prefix = 'SPACE';\n        } else if (last_type === 'TK_START_BLOCK') {\n            if (flags.inline_frame) {\n                prefix = 'SPACE';\n            } else {\n                prefix = 'NEWLINE';\n            }\n        } else if (last_type === 'TK_END_EXPR') {\n            output.space_before_token = true;\n            prefix = 'NEWLINE';\n        }\n\n        if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, tokenizer.line_starters) && flags.last_text !== ')') {\n            if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {\n                prefix = 'SPACE';\n            } else {\n                prefix = 'NEWLINE';\n            }\n\n        }\n\n        if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n            if ((!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||\n                    opt.brace_style === \"expand\" ||\n                    opt.brace_style === \"end-expand\" ||\n                    (opt.brace_style === \"none\" && current_token.wanted_newline)) &&\n                !flags.inline_frame) {\n                print_newline();\n            } else {\n                output.trim(true);\n                var line = output.current_line;\n                // If we trimmed and there's something other than a close block before us\n                // put a newline back in.  Handles '} // comment' scenario.\n                if (line.last() !== '}') {\n                    print_newline();\n                }\n                output.space_before_token = true;\n            }\n        } else if (prefix === 'NEWLINE') {\n            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                // no newline between 'return nnn'\n                output.space_before_token = true;\n            } else if (last_type !== 'TK_END_EXPR') {\n                if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n                    // no need to force newline on 'var': for (var x = 0...)\n                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {\n                        // no newline for } else if {\n                        output.space_before_token = true;\n                    } else {\n                        print_newline();\n                    }\n                }\n            } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, tokenizer.line_starters) && flags.last_text !== ')') {\n                print_newline();\n            }\n        } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n            print_newline(); // }, in lists get a newline treatment\n        } else if (prefix === 'SPACE') {\n            output.space_before_token = true;\n        }\n        print_token();\n        flags.last_word = current_token.text;\n\n        if (current_token.type === 'TK_RESERVED') {\n            if (current_token.text === 'do') {\n                flags.do_block = true;\n            } else if (current_token.text === 'if') {\n                flags.if_block = true;\n            } else if (current_token.text === 'import') {\n                flags.import_block = true;\n            } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {\n                flags.import_block = false;\n            }\n        }\n    }\n\n    function handle_semicolon() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            // Semicolon can be the start (and end) of a statement\n            output.space_before_token = false;\n        } else {\n            handle_whitespace_and_comments(current_token);\n        }\n\n        var next_token = get_token(1);\n        while (flags.mode === MODE.Statement &&\n            !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&\n            !flags.do_block) {\n            restore_mode();\n        }\n\n        // hacky but effective for the moment\n        if (flags.import_block) {\n            flags.import_block = false;\n        }\n        print_token();\n    }\n\n    function handle_string() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            // One difference - strings want at least a space before\n            output.space_before_token = true;\n        } else {\n            handle_whitespace_and_comments(current_token);\n            if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {\n                output.space_before_token = true;\n            } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                if (!start_of_object_property()) {\n                    allow_wrap_or_preserved_newline();\n                }\n            } else {\n                print_newline();\n            }\n        }\n        print_token();\n    }\n\n    function handle_equals() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        } else {\n            handle_whitespace_and_comments(current_token);\n        }\n\n        if (flags.declaration_statement) {\n            // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n            flags.declaration_assignment = true;\n        }\n        output.space_before_token = true;\n        print_token();\n        output.space_before_token = true;\n    }\n\n    function handle_comma() {\n        handle_whitespace_and_comments(current_token, true);\n\n        print_token();\n        output.space_before_token = true;\n        if (flags.declaration_statement) {\n            if (is_expression(flags.parent.mode)) {\n                // do not break on comma, for(var a = 1, b = 2)\n                flags.declaration_assignment = false;\n            }\n\n            if (flags.declaration_assignment) {\n                flags.declaration_assignment = false;\n                print_newline(false, true);\n            } else if (opt.comma_first) {\n                // for comma-first, we want to allow a newline before the comma\n                // to turn into a newline after the comma, which we will fixup later\n                allow_wrap_or_preserved_newline();\n            }\n        } else if (flags.mode === MODE.ObjectLiteral ||\n            (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n            if (flags.mode === MODE.Statement) {\n                restore_mode();\n            }\n\n            if (!flags.inline_frame) {\n                print_newline();\n            }\n        } else if (opt.comma_first) {\n            // EXPR or DO_BLOCK\n            // for comma-first, we want to allow a newline before the comma\n            // to turn into a newline after the comma, which we will fixup later\n            allow_wrap_or_preserved_newline();\n        }\n    }\n\n    function handle_operator() {\n        var isGeneratorAsterisk = current_token.text === '*' &&\n            ((last_type === 'TK_RESERVED' && in_array(flags.last_text, ['function', 'yield'])) ||\n                (in_array(last_type, ['TK_START_BLOCK', 'TK_COMMA', 'TK_END_BLOCK', 'TK_SEMICOLON']))\n            );\n        var isUnary = in_array(current_token.text, ['-', '+']) && (\n            in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||\n            in_array(flags.last_text, tokenizer.line_starters) ||\n            flags.last_text === ','\n        );\n\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        } else {\n            var preserve_statement_flags = !isGeneratorAsterisk;\n            handle_whitespace_and_comments(current_token, preserve_statement_flags);\n        }\n\n        if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n            // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n            output.space_before_token = true;\n            print_token();\n            return;\n        }\n\n        // hack for actionscript's import .*;\n        if (current_token.text === '*' && last_type === 'TK_DOT') {\n            print_token();\n            return;\n        }\n\n        if (current_token.text === '::') {\n            // no spaces around exotic namespacing syntax operator\n            print_token();\n            return;\n        }\n\n        // Allow line wrapping between operators when operator_position is\n        //   set to before or preserve\n        if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n            allow_wrap_or_preserved_newline();\n        }\n\n        if (current_token.text === ':' && flags.in_case) {\n            flags.case_body = true;\n            indent();\n            print_token();\n            print_newline();\n            flags.in_case = false;\n            return;\n        }\n\n        var space_before = true;\n        var space_after = true;\n        var in_ternary = false;\n        if (current_token.text === ':') {\n            if (flags.ternary_depth === 0) {\n                // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n                space_before = false;\n            } else {\n                flags.ternary_depth -= 1;\n                in_ternary = true;\n            }\n        } else if (current_token.text === '?') {\n            flags.ternary_depth += 1;\n        }\n\n        // let's handle the operator_position option prior to any conflicting logic\n        if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, tokenizer.positionable_operators)) {\n            var isColon = current_token.text === ':';\n            var isTernaryColon = (isColon && in_ternary);\n            var isOtherColon = (isColon && !in_ternary);\n\n            switch (opt.operator_position) {\n                case OPERATOR_POSITION.before_newline:\n                    // if the current token is : and it's not a ternary statement then we set space_before to false\n                    output.space_before_token = !isOtherColon;\n\n                    print_token();\n\n                    if (!isColon || isTernaryColon) {\n                        allow_wrap_or_preserved_newline();\n                    }\n\n                    output.space_before_token = true;\n                    return;\n\n                case OPERATOR_POSITION.after_newline:\n                    // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n                    //   then print a newline.\n\n                    output.space_before_token = true;\n\n                    if (!isColon || isTernaryColon) {\n                        if (get_token(1).wanted_newline) {\n                            print_newline(false, true);\n                        } else {\n                            allow_wrap_or_preserved_newline();\n                        }\n                    } else {\n                        output.space_before_token = false;\n                    }\n\n                    print_token();\n\n                    output.space_before_token = true;\n                    return;\n\n                case OPERATOR_POSITION.preserve_newline:\n                    if (!isOtherColon) {\n                        allow_wrap_or_preserved_newline();\n                    }\n\n                    // if we just added a newline, or the current token is : and it's not a ternary statement,\n                    //   then we set space_before to false\n                    space_before = !(output.just_added_newline() || isOtherColon);\n\n                    output.space_before_token = space_before;\n                    print_token();\n                    output.space_before_token = true;\n                    return;\n            }\n        }\n\n        if (isGeneratorAsterisk) {\n            allow_wrap_or_preserved_newline();\n            space_before = false;\n            var next_token = get_token(1);\n            space_after = next_token && in_array(next_token.type, ['TK_WORD', 'TK_RESERVED']);\n        } else if (current_token.text === '...') {\n            allow_wrap_or_preserved_newline();\n            space_before = last_type === 'TK_START_BLOCK';\n            space_after = false;\n        } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {\n            // unary operators (and binary +/- pretending to be unary) special cases\n\n            space_before = false;\n            space_after = false;\n\n            // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n            // if there is a newline between -- or ++ and anything else we should preserve it.\n            if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {\n                print_newline(false, true);\n            }\n\n            if (flags.last_text === ';' && is_expression(flags.mode)) {\n                // for (;; ++i)\n                //        ^^^\n                space_before = true;\n            }\n\n            if (last_type === 'TK_RESERVED') {\n                space_before = true;\n            } else if (last_type === 'TK_END_EXPR') {\n                space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n            } else if (last_type === 'TK_OPERATOR') {\n                // a++ + ++b;\n                // a - -b\n                space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n                // + and - are not unary when preceeded by -- or ++ operator\n                // a-- + b\n                // a * +b\n                // a - -b\n                if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n                    space_after = true;\n                }\n            }\n\n\n            if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&\n                (flags.last_text === '{' || flags.last_text === ';')) {\n                // { foo; --i }\n                // foo(); --bar;\n                print_newline();\n            }\n        }\n\n        output.space_before_token = output.space_before_token || space_before;\n        print_token();\n        output.space_before_token = space_after;\n    }\n\n    function handle_block_comment(preserve_statement_flags) {\n        if (output.raw) {\n            output.add_raw_token(current_token);\n            if (current_token.directives && current_token.directives.preserve === 'end') {\n                // If we're testing the raw output behavior, do not allow a directive to turn it off.\n                output.raw = opt.test_output_raw;\n            }\n            return;\n        }\n\n        if (current_token.directives) {\n            print_newline(false, preserve_statement_flags);\n            print_token();\n            if (current_token.directives.preserve === 'start') {\n                output.raw = true;\n            }\n            print_newline(false, true);\n            return;\n        }\n\n        // inline block\n        if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {\n            output.space_before_token = true;\n            print_token();\n            output.space_before_token = true;\n            return;\n        }\n\n        var lines = split_linebreaks(current_token.text);\n        var j; // iterator for this case\n        var javadoc = false;\n        var starless = false;\n        var lastIndent = current_token.whitespace_before;\n        var lastIndentLength = lastIndent.length;\n\n        // block comment starts with a new line\n        print_newline(false, preserve_statement_flags);\n        if (lines.length > 1) {\n            javadoc = all_lines_start_with(lines.slice(1), '*');\n            starless = each_line_matches_indent(lines.slice(1), lastIndent);\n        }\n\n        // first line always indented\n        print_token(lines[0]);\n        for (j = 1; j < lines.length; j++) {\n            print_newline(false, true);\n            if (javadoc) {\n                // javadoc: reformat and re-indent\n                print_token(' ' + ltrim(lines[j]));\n            } else if (starless && lines[j].length > lastIndentLength) {\n                // starless: re-indent non-empty content, avoiding trim\n                print_token(lines[j].substring(lastIndentLength));\n            } else {\n                // normal comments output raw\n                output.add_token(lines[j]);\n            }\n        }\n\n        // for comments of more than one line, make sure there's a new line after\n        print_newline(false, preserve_statement_flags);\n    }\n\n    function handle_comment(preserve_statement_flags) {\n        if (current_token.wanted_newline) {\n            print_newline(false, preserve_statement_flags);\n        } else {\n            output.trim(true);\n        }\n\n        output.space_before_token = true;\n        print_token();\n        print_newline(false, preserve_statement_flags);\n    }\n\n    function handle_dot() {\n        if (start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        } else {\n            handle_whitespace_and_comments(current_token, true);\n        }\n\n        if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n            output.space_before_token = true;\n        } else {\n            // allow preserved newlines before dots in general\n            // force newlines on dots after close paren when break_chained - for bar().baz()\n            allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n        }\n\n        print_token();\n    }\n\n    function handle_unknown(preserve_statement_flags) {\n        print_token();\n\n        if (current_token.text[current_token.text.length - 1] === '\\n') {\n            print_newline(false, preserve_statement_flags);\n        }\n    }\n\n    function handle_eof() {\n        // Unwind any open statements\n        while (flags.mode === MODE.Statement) {\n            restore_mode();\n        }\n        handle_whitespace_and_comments(current_token);\n    }\n}\n\nmodule.exports.Beautifier = Beautifier;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction InputScanner(input) {\n    var _input = input;\n    var _input_length = _input.length;\n    var _position = 0;\n\n    this.back = function() {\n        _position -= 1;\n    };\n\n    this.hasNext = function() {\n        return _position < _input_length;\n    };\n\n    this.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n            val = _input.charAt(_position);\n            _position += 1;\n        }\n        return val;\n    };\n\n    this.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += _position;\n        if (index >= 0 && index < _input_length) {\n            val = _input.charAt(index);\n        }\n        return val;\n    };\n\n    this.peekCharCode = function(index) {\n        var val = 0;\n        index = index || 0;\n        index += _position;\n        if (index >= 0 && index < _input_length) {\n            val = _input.charCodeAt(index);\n        }\n        return val;\n    };\n\n    this.test = function(pattern, index) {\n        index = index || 0;\n        pattern.lastIndex = _position + index;\n        return pattern.test(_input);\n    };\n\n    this.testChar = function(pattern, index) {\n        var val = this.peek(index);\n        return val !== null && pattern.test(val);\n    };\n\n    this.match = function(pattern) {\n        pattern.lastIndex = _position;\n        var pattern_match = pattern.exec(_input);\n        if (pattern_match && pattern_match.index === _position) {\n            _position += pattern_match[0].length;\n        } else {\n            pattern_match = null;\n        }\n        return pattern_match;\n    };\n}\n\n\nmodule.exports.InputScanner = InputScanner;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nfunction mergeOpts(allOptions, targetType) {\n    var finalOpts = {};\n    var name;\n\n    for (name in allOptions) {\n        if (name !== targetType) {\n            finalOpts[name] = allOptions[name];\n        }\n    }\n\n    //merge in the per type settings for the targetType\n    if (targetType in allOptions) {\n        for (name in allOptions[targetType]) {\n            finalOpts[name] = allOptions[targetType][name];\n        }\n    }\n    return finalOpts;\n}\n\nmodule.exports.mergeOpts = mergeOpts;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction OutputLine(parent) {\n    var _character_count = 0;\n    // use indent_count as a marker for lines that have preserved indentation\n    var _indent_count = -1;\n\n    var _items = [];\n    var _empty = true;\n\n    this.set_indent = function(level) {\n        _character_count = parent.baseIndentLength + level * parent.indent_length;\n        _indent_count = level;\n    };\n\n    this.get_character_count = function() {\n        return _character_count;\n    };\n\n    this.is_empty = function() {\n        return _empty;\n    };\n\n    this.last = function() {\n        if (!this._empty) {\n            return _items[_items.length - 1];\n        } else {\n            return null;\n        }\n    };\n\n    this.push = function(input) {\n        _items.push(input);\n        _character_count += input.length;\n        _empty = false;\n    };\n\n    this.pop = function() {\n        var item = null;\n        if (!_empty) {\n            item = _items.pop();\n            _character_count -= item.length;\n            _empty = _items.length === 0;\n        }\n        return item;\n    };\n\n    this.remove_indent = function() {\n        if (_indent_count > 0) {\n            _indent_count -= 1;\n            _character_count -= parent.indent_length;\n        }\n    };\n\n    this.trim = function() {\n        while (this.last() === ' ') {\n            _items.pop();\n            _character_count -= 1;\n        }\n        _empty = _items.length === 0;\n    };\n\n    this.toString = function() {\n        var result = '';\n        if (!this._empty) {\n            if (_indent_count >= 0) {\n                result = parent.indent_cache[_indent_count];\n            }\n            result += _items.join('');\n        }\n        return result;\n    };\n}\n\nfunction Output(indent_string, baseIndentString) {\n    baseIndentString = baseIndentString || '';\n    this.indent_cache = [baseIndentString];\n    this.baseIndentLength = baseIndentString.length;\n    this.indent_length = indent_string.length;\n    this.raw = false;\n\n    var lines = [];\n    this.baseIndentString = baseIndentString;\n    this.indent_string = indent_string;\n    this.previous_line = null;\n    this.current_line = null;\n    this.space_before_token = false;\n\n    this.add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = new OutputLine(this);\n        lines.push(this.current_line);\n    };\n\n    // initialize\n    this.add_outputline();\n\n\n    this.get_line_number = function() {\n        return lines.length;\n    };\n\n    // Using object instead of string to allow for later expansion of info about each line\n    this.add_new_line = function(force_newline) {\n        if (this.get_line_number() === 1 && this.just_added_newline()) {\n            return false; // no newline on start of file\n        }\n\n        if (force_newline || !this.just_added_newline()) {\n            if (!this.raw) {\n                this.add_outputline();\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n    this.get_code = function(end_with_newline, eol) {\n        var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n\n        if (end_with_newline) {\n            sweet_code += '\\n';\n        }\n\n        if (eol !== '\\n') {\n            sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n\n        return sweet_code;\n    };\n\n    this.set_indent = function(level) {\n        // Never indent your first output indent at the start of the file\n        if (lines.length > 1) {\n            while (level >= this.indent_cache.length) {\n                this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n            }\n\n            this.current_line.set_indent(level);\n            return true;\n        }\n        this.current_line.set_indent(0);\n        return false;\n    };\n\n    this.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n            this.add_outputline();\n        }\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n    };\n\n    this.add_token = function(printable_token) {\n        this.add_space_before_token();\n        this.current_line.push(printable_token);\n    };\n\n    this.add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n            this.current_line.push(' ');\n        }\n        this.space_before_token = false;\n    };\n\n    this.remove_indent = function(index) {\n        var output_length = lines.length;\n        while (index < output_length) {\n            lines[index].remove_indent();\n            index++;\n        }\n    };\n\n    this.trim = function(eat_newlines) {\n        eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n        this.current_line.trim(indent_string, baseIndentString);\n\n        while (eat_newlines && lines.length > 1 &&\n            this.current_line.is_empty()) {\n            lines.pop();\n            this.current_line = lines[lines.length - 1];\n            this.current_line.trim();\n        }\n\n        this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n    };\n\n    this.just_added_newline = function() {\n        return this.current_line.is_empty();\n    };\n\n    this.just_added_blankline = function() {\n        if (this.just_added_newline()) {\n            if (lines.length === 1) {\n                return true; // start of the file and newline = blank\n            }\n\n            var line = lines[lines.length - 2];\n            return line.is_empty();\n        }\n        return false;\n    };\n}\n\nmodule.exports.Output = Output;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction Token(type, text, newlines, whitespace_before, parent) {\n    this.type = type;\n    this.text = text;\n\n    // comments_before are\n    // comments that have a new line before them\n    // and may or may not have a newline after\n    // this is a set of comments before\n    this.comments_before = /* inline comment*/ [];\n\n\n    this.comments_after = []; // no new line before and newline after\n    this.newlines = newlines || 0;\n    this.wanted_newline = newlines > 0;\n    this.whitespace_before = whitespace_before || '';\n    this.parent = parent || null;\n    this.opened = null;\n    this.directives = null;\n}\n\nmodule.exports.Token = Token;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar Beautifier = __webpack_require__(1).Beautifier;\n\nfunction js_beautify(js_source_text, options) {\n    var beautifier = new Beautifier(js_source_text, options);\n    return beautifier.beautify();\n}\n\nmodule.exports = js_beautify;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar InputScanner = __webpack_require__(2).InputScanner;\nvar Token = __webpack_require__(5).Token;\nvar acorn = __webpack_require__(0);\n\nfunction trim(s) {\n    return s.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction in_array(what, arr) {\n    for (var i = 0; i < arr.length; i += 1) {\n        if (arr[i] === what) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction Tokenizer(input_string, opts) {\n\n    var whitespace = \"\\n\\r\\t \".split('');\n    var digit = /[0-9]/;\n    var digit_bin = /[01]/;\n    var digit_oct = /[01234567]/;\n    var digit_hex = /[0123456789abcdefABCDEF]/;\n\n    this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');\n    var punct = this.positionable_operators.concat(\n        // non-positionable operators - these do not follow operator position settings\n        '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~ ...'.split(' '));\n\n    // words which should always start on new line.\n    this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\n    var reserved_words = this.line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);\n\n    //  /* ... */ comment ends with nearest */ or end of file\n    var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;\n\n    // comment ends just before nearest linefeed or end of file\n    var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;\n\n    var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;\n    var directive_pattern = / (\\w+)[:](\\w+)/g;\n    var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;\n\n    var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g;\n\n    var n_newlines, whitespace_before_token, in_html_comment, tokens;\n    var input;\n\n    this.tokenize = function() {\n        input = new InputScanner(input_string);\n        in_html_comment = false;\n        tokens = [];\n\n        var next, last;\n        var token_values;\n        var open = null;\n        var open_stack = [];\n        var comments = [];\n\n        while (!(last && last.type === 'TK_EOF')) {\n            token_values = tokenize_next();\n            next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n            while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {\n                if (next.type === 'TK_BLOCK_COMMENT') {\n                    next.directives = token_values[2];\n                }\n                comments.push(next);\n                token_values = tokenize_next();\n                next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n            }\n\n            if (comments.length) {\n                next.comments_before = comments;\n                comments = [];\n            }\n\n            if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {\n                next.parent = last;\n                open_stack.push(open);\n                open = next;\n            } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&\n                (open && (\n                    (next.text === ']' && open.text === '[') ||\n                    (next.text === ')' && open.text === '(') ||\n                    (next.text === '}' && open.text === '{')))) {\n                next.parent = open.parent;\n                next.opened = open;\n\n                open = open_stack.pop();\n            }\n\n            tokens.push(next);\n            last = next;\n        }\n\n        return tokens;\n    };\n\n    function get_directives(text) {\n        if (!text.match(directives_block_pattern)) {\n            return null;\n        }\n\n        var directives = {};\n        directive_pattern.lastIndex = 0;\n        var directive_match = directive_pattern.exec(text);\n\n        while (directive_match) {\n            directives[directive_match[1]] = directive_match[2];\n            directive_match = directive_pattern.exec(text);\n        }\n\n        return directives;\n    }\n\n    function tokenize_next() {\n        var resulting_string;\n        var whitespace_on_this_line = [];\n\n        n_newlines = 0;\n        whitespace_before_token = '';\n\n        var c = input.next();\n\n        if (c === null) {\n            return ['', 'TK_EOF'];\n        }\n\n        var last_token;\n        if (tokens.length) {\n            last_token = tokens[tokens.length - 1];\n        } else {\n            // For the sake of tokenizing we can pretend that there was on open brace to start\n            last_token = new Token('TK_START_BLOCK', '{');\n        }\n\n        while (in_array(c, whitespace)) {\n\n            if (acorn.newline.test(c)) {\n                if (!(c === '\\n' && input.peek(-2) === '\\r')) {\n                    n_newlines += 1;\n                    whitespace_on_this_line = [];\n                }\n            } else {\n                whitespace_on_this_line.push(c);\n            }\n\n            c = input.next();\n\n            if (c === null) {\n                return ['', 'TK_EOF'];\n            }\n        }\n\n        if (whitespace_on_this_line.length) {\n            whitespace_before_token = whitespace_on_this_line.join('');\n        }\n\n        if (digit.test(c) || (c === '.' && input.testChar(digit))) {\n            var allow_decimal = true;\n            var allow_e = true;\n            var local_digit = digit;\n\n            if (c === '0' && input.testChar(/[XxOoBb]/)) {\n                // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits\n                allow_decimal = false;\n                allow_e = false;\n                if (input.testChar(/[Bb]/)) {\n                    local_digit = digit_bin;\n                } else if (input.testChar(/[Oo]/)) {\n                    local_digit = digit_oct;\n                } else {\n                    local_digit = digit_hex;\n                }\n                c += input.next();\n            } else if (c === '.') {\n                // Already have a decimal for this literal, don't allow another\n                allow_decimal = false;\n            } else {\n                // we know this first loop will run.  It keeps the logic simpler.\n                c = '';\n                input.back();\n            }\n\n            // Add the digits\n            while (input.testChar(local_digit)) {\n                c += input.next();\n\n                if (allow_decimal && input.peek() === '.') {\n                    c += input.next();\n                    allow_decimal = false;\n                }\n\n                // a = 1.e-7 is valid, so we test for . then e in one loop\n                if (allow_e && input.testChar(/[Ee]/)) {\n                    c += input.next();\n\n                    if (input.testChar(/[+-]/)) {\n                        c += input.next();\n                    }\n\n                    allow_e = false;\n                    allow_decimal = false;\n                }\n            }\n\n            return [c, 'TK_WORD'];\n        }\n\n        if (acorn.isIdentifierStart(input.peekCharCode(-1))) {\n            if (input.hasNext()) {\n                while (acorn.isIdentifierChar(input.peekCharCode())) {\n                    c += input.next();\n                    if (!input.hasNext()) {\n                        break;\n                    }\n                }\n            }\n\n            if (!(last_token.type === 'TK_DOT' ||\n                    (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&\n                in_array(c, reserved_words)) {\n                if (c === 'in' || c === 'of') { // hack for 'in' and 'of' operators\n                    return [c, 'TK_OPERATOR'];\n                }\n                return [c, 'TK_RESERVED'];\n            }\n\n            return [c, 'TK_WORD'];\n        }\n\n        if (c === '(' || c === '[') {\n            return [c, 'TK_START_EXPR'];\n        }\n\n        if (c === ')' || c === ']') {\n            return [c, 'TK_END_EXPR'];\n        }\n\n        if (c === '{') {\n            return [c, 'TK_START_BLOCK'];\n        }\n\n        if (c === '}') {\n            return [c, 'TK_END_BLOCK'];\n        }\n\n        if (c === ';') {\n            return [c, 'TK_SEMICOLON'];\n        }\n\n        if (c === '/') {\n            var comment = '';\n            var comment_match;\n            // peek for comment /* ... */\n            if (input.peek() === '*') {\n                input.next();\n                comment_match = input.match(block_comment_pattern);\n                comment = '/*' + comment_match[0];\n                var directives = get_directives(comment);\n                if (directives && directives.ignore === 'start') {\n                    comment_match = input.match(directives_end_ignore_pattern);\n                    comment += comment_match[0];\n                }\n                comment = comment.replace(acorn.allLineBreaks, '\\n');\n                return [comment, 'TK_BLOCK_COMMENT', directives];\n            }\n            // peek for comment // ...\n            if (input.peek() === '/') {\n                input.next();\n                comment_match = input.match(comment_pattern);\n                comment = '//' + comment_match[0];\n                return [comment, 'TK_COMMENT'];\n            }\n\n        }\n\n        var startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n\n        if (c === '`' || c === \"'\" || c === '\"' || // string\n            (\n                (c === '/') || // regexp\n                (opts.e4x && c === \"<\" && input.test(startXmlRegExp, -1)) // xml\n            ) && ( // regex and xml can only appear in specific locations during parsing\n                (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n                (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&\n                    last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||\n                (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n                    'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n                ]))\n            )) {\n\n            var sep = c,\n                esc = false,\n                has_char_escapes = false;\n\n            resulting_string = c;\n\n            if (sep === '/') {\n                //\n                // handle regexp\n                //\n                var in_char_class = false;\n                while (input.hasNext() &&\n                    ((esc || in_char_class || input.peek() !== sep) &&\n                        !input.testChar(acorn.newline))) {\n                    resulting_string += input.peek();\n                    if (!esc) {\n                        esc = input.peek() === '\\\\';\n                        if (input.peek() === '[') {\n                            in_char_class = true;\n                        } else if (input.peek() === ']') {\n                            in_char_class = false;\n                        }\n                    } else {\n                        esc = false;\n                    }\n                    input.next();\n                }\n            } else if (opts.e4x && sep === '<') {\n                //\n                // handle e4x xml literals\n                //\n\n                var xmlRegExp = /[\\s\\S]*?<(\\/?)([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n                input.back();\n                var xmlStr = '';\n                var match = input.match(startXmlRegExp);\n                if (match) {\n                    // Trim root tag to attempt to\n                    var rootTag = match[2].replace(/^{\\s+/, '{').replace(/\\s+}$/, '}');\n                    var isCurlyRoot = rootTag.indexOf('{') === 0;\n                    var depth = 0;\n                    while (match) {\n                        var isEndTag = !!match[1];\n                        var tagName = match[2];\n                        var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n                        if (!isSingletonTag &&\n                            (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\\s+/, '{').replace(/\\s+}$/, '}')))) {\n                            if (isEndTag) {\n                                --depth;\n                            } else {\n                                ++depth;\n                            }\n                        }\n                        xmlStr += match[0];\n                        if (depth <= 0) {\n                            break;\n                        }\n                        match = input.match(xmlRegExp);\n                    }\n                    // if we didn't close correctly, keep unformatted.\n                    if (!match) {\n                        xmlStr += input.match(/[\\s\\S]*/g)[0];\n                    }\n                    xmlStr = xmlStr.replace(acorn.allLineBreaks, '\\n');\n                    return [xmlStr, \"TK_STRING\"];\n                }\n            } else {\n                //\n                // handle string\n                //\n                var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {\n                    // Template strings can travers lines without escape characters.\n                    // Other strings cannot\n                    var current_char;\n                    while (input.hasNext()) {\n                        current_char = input.peek();\n                        if (!(esc || (current_char !== delimiter &&\n                                (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {\n                            break;\n                        }\n\n                        // Handle \\r\\n linebreaks after escapes or in template strings\n                        if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {\n                            if (current_char === '\\r' && input.peek(1) === '\\n') {\n                                input.next();\n                                current_char = input.peek();\n                            }\n                            resulting_string += '\\n';\n                        } else {\n                            resulting_string += current_char;\n                        }\n\n                        if (esc) {\n                            if (current_char === 'x' || current_char === 'u') {\n                                has_char_escapes = true;\n                            }\n                            esc = false;\n                        } else {\n                            esc = current_char === '\\\\';\n                        }\n\n                        input.next();\n\n                        if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {\n                            if (delimiter === '`') {\n                                parse_string('}', allow_unescaped_newlines, '`');\n                            } else {\n                                parse_string('`', allow_unescaped_newlines, '${');\n                            }\n\n                            if (input.hasNext()) {\n                                resulting_string += input.next();\n                            }\n                        }\n                    }\n                };\n\n                if (sep === '`') {\n                    parse_string('`', true, '${');\n                } else {\n                    parse_string(sep);\n                }\n            }\n\n            if (has_char_escapes && opts.unescape_strings) {\n                resulting_string = unescape_string(resulting_string);\n            }\n\n            if (input.peek() === sep) {\n                resulting_string += sep;\n                input.next();\n\n                if (sep === '/') {\n                    // regexps may have modifiers /regexp/MOD , so fetch those, too\n                    // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n                    while (input.hasNext() && acorn.isIdentifierStart(input.peekCharCode())) {\n                        resulting_string += input.next();\n                    }\n                }\n            }\n            return [resulting_string, 'TK_STRING'];\n        }\n\n        if (c === '#') {\n\n            if (tokens.length === 0 && input.peek() === '!') {\n                // shebang\n                resulting_string = c;\n                while (input.hasNext() && c !== '\\n') {\n                    c = input.next();\n                    resulting_string += c;\n                }\n                return [trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n            }\n\n\n\n            // Spidermonkey-specific sharp variables for circular references\n            // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n            // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n            var sharp = '#';\n            if (input.hasNext() && input.testChar(digit)) {\n                do {\n                    c = input.next();\n                    sharp += c;\n                } while (input.hasNext() && c !== '#' && c !== '=');\n                if (c === '#') {\n                    //\n                } else if (input.peek() === '[' && input.peek(1) === ']') {\n                    sharp += '[]';\n                    input.next();\n                    input.next();\n                } else if (input.peek() === '{' && input.peek(1) === '}') {\n                    sharp += '{}';\n                    input.next();\n                    input.next();\n                }\n                return [sharp, 'TK_WORD'];\n            }\n        }\n\n        if (c === '<' && (input.peek() === '?' || input.peek() === '%')) {\n            input.back();\n            var template_match = input.match(template_pattern);\n            if (template_match) {\n                c = template_match[0];\n                c = c.replace(acorn.allLineBreaks, '\\n');\n                return [c, 'TK_STRING'];\n            }\n        }\n\n        if (c === '<' && input.match(/\\!--/g)) {\n            c = '<!--';\n            while (input.hasNext() && !input.testChar(acorn.newline)) {\n                c += input.next();\n            }\n            in_html_comment = true;\n            return [c, 'TK_COMMENT'];\n        }\n\n        if (c === '-' && in_html_comment && input.match(/->/g)) {\n            in_html_comment = false;\n            return ['-->', 'TK_COMMENT'];\n        }\n\n        if (c === '.') {\n            if (input.peek() === '.' && input.peek(1) === '.') {\n                c += input.next() + input.next();\n                return [c, 'TK_OPERATOR'];\n            }\n            return [c, 'TK_DOT'];\n        }\n\n        if (in_array(c, punct)) {\n            while (input.hasNext() && in_array(c + input.peek(), punct)) {\n                c += input.next();\n                if (!input.hasNext()) {\n                    break;\n                }\n            }\n\n            if (c === ',') {\n                return [c, 'TK_COMMA'];\n            } else if (c === '=') {\n                return [c, 'TK_EQUALS'];\n            } else {\n                return [c, 'TK_OPERATOR'];\n            }\n        }\n\n        return [c, 'TK_UNKNOWN'];\n    }\n\n\n    function unescape_string(s) {\n        // You think that a regex would work for this\n        // return s.replace(/\\\\x([0-9a-f]{2})/gi, function(match, val) {\n        //         return String.fromCharCode(parseInt(val, 16));\n        //     })\n        // However, dealing with '\\xff', '\\\\xff', '\\\\\\xff' makes this more fun.\n        var out = '',\n            escaped = 0;\n\n        var input_scan = new InputScanner(s);\n        var matched = null;\n\n        while (input_scan.hasNext()) {\n            // Keep any whitespace, non-slash characters\n            // also keep slash pairs.\n            matched = input_scan.match(/([\\s]|[^\\\\]|\\\\\\\\)+/g);\n\n            if (matched) {\n                out += matched[0];\n            }\n\n            if (input_scan.peek() === '\\\\') {\n                input_scan.next();\n                if (input_scan.peek() === 'x') {\n                    matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);\n                } else if (input_scan.peek() === 'u') {\n                    matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);\n                } else {\n                    out += '\\\\';\n                    if (input_scan.hasNext()) {\n                        out += input_scan.next();\n                    }\n                    continue;\n                }\n\n                // If there's some error decoding, return the original string\n                if (!matched) {\n                    return s;\n                }\n\n                escaped = parseInt(matched[1], 16);\n\n                if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {\n                    // we bail out on \\x7f..\\xff,\n                    // leaving whole string escaped,\n                    // as it's probably completely binary\n                    return s;\n                } else if (escaped >= 0x00 && escaped < 0x20) {\n                    // leave 0x00...0x1f escaped\n                    out += '\\\\' + matched[0];\n                    continue;\n                } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                    // single-quote, apostrophe, backslash - escape these\n                    out += '\\\\' + String.fromCharCode(escaped);\n                } else {\n                    out += String.fromCharCode(escaped);\n                }\n            }\n        }\n\n        return out;\n    }\n}\n\nmodule.exports.Tokenizer = Tokenizer;\n\n/***/ })\n/******/ ]);\nvar js_beautify = legacy_beautify_js;\n/* Footer */\nif (typeof define === \"function\" && define.amd) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    define([], function() {\n        return { js_beautify: js_beautify };\n    });\n} else if (typeof exports !== \"undefined\") {\n    // Add support for CommonJS. Just put this file somewhere on your require.paths\n    // and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\n    exports.js_beautify = js_beautify;\n} else if (typeof window !== \"undefined\") {\n    // If we're running a web page and don't have either of the above, add our one global\n    window.js_beautify = js_beautify;\n} else if (typeof global !== \"undefined\") {\n    // If we don't even have window, try global.\n    global.js_beautify = js_beautify;\n}\n\n}());\n","/*jshint curly:false, eqeqeq:true, laxbreak:true, noempty:false */\n/* AUTO-GENERATED. DO NOT MODIFY. */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n CSS Beautifier\n---------------\n\n    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)\n\n    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n        http://jsbeautifier.org/\n\n    Usage:\n        css_beautify(source_text);\n        css_beautify(source_text, options);\n\n    The options are (default in brackets):\n        indent_size (4)                         — indentation size,\n        indent_char (space)                     — character to indent with,\n        selector_separator_newline (true)       - separate selectors with newline or\n                                                  not (e.g. \"a,\\nbr\" or \"a, br\")\n        end_with_newline (false)                - end with a newline\n        newline_between_rules (true)            - add a new line after every css rule\n        space_around_selector_separator (false) - ensure space around selector separators:\n                                                  '>', '+', '~' (e.g. \"a>b\" -> \"a > b\")\n    e.g\n\n    css_beautify(css_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t',\n      'selector_separator': ' ',\n      'end_with_newline': false,\n      'newline_between_rules': true,\n      'space_around_selector_separator': true\n    });\n*/\n\n// http://www.w3.org/TR/CSS21/syndata.html#tokenization\n// http://www.w3.org/TR/css3-syntax/\n\n(function() {\nvar legacy_beautify_css =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nvar mergeOpts = __webpack_require__(2).mergeOpts;\nvar acorn = __webpack_require__(1);\nvar Output = __webpack_require__(3).Output;\n\n\nvar lineBreak = acorn.lineBreak;\nvar allLineBreaks = acorn.allLineBreaks;\n\nfunction Beautifier(source_text, options) {\n    options = options || {};\n\n    // Allow the setting of language/file-type specific options\n    // with inheritance of overall settings\n    options = mergeOpts(options, 'css');\n\n    source_text = source_text || '';\n\n    var newlinesFromLastWSEat = 0;\n    var indentSize = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n    var indentCharacter = options.indent_char || ' ';\n    var preserve_newlines = (options.preserve_newlines === undefined) ? false : options.preserve_newlines;\n    var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;\n    var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n    var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;\n    var space_around_combinator = (options.space_around_combinator === undefined) ? false : options.space_around_combinator;\n    space_around_combinator = space_around_combinator || ((options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator);\n    var eol = options.eol ? options.eol : 'auto';\n\n    if (options.indent_with_tabs) {\n        indentCharacter = '\\t';\n        indentSize = 1;\n    }\n\n    if (eol === 'auto') {\n        eol = '\\n';\n        if (source_text && lineBreak.test(source_text || '')) {\n            eol = source_text.match(lineBreak)[0];\n        }\n    }\n\n    eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n    // HACK: newline parsing inconsistent. This brute force normalizes the input.\n    source_text = source_text.replace(allLineBreaks, '\\n');\n\n    // tokenizer\n    var whiteRe = /^\\s+$/;\n\n    var pos = -1,\n        ch;\n    var parenLevel = 0;\n\n    function next() {\n        ch = source_text.charAt(++pos);\n        return ch || '';\n    }\n\n    function peek(skipWhitespace) {\n        var result = '';\n        var prev_pos = pos;\n        if (skipWhitespace) {\n            eatWhitespace();\n        }\n        result = source_text.charAt(pos + 1) || '';\n        pos = prev_pos - 1;\n        next();\n        return result;\n    }\n\n    function eatString(endChars) {\n        var start = pos;\n        while (next()) {\n            if (ch === \"\\\\\") {\n                next();\n            } else if (endChars.indexOf(ch) !== -1) {\n                break;\n            } else if (ch === \"\\n\") {\n                break;\n            }\n        }\n        return source_text.substring(start, pos + 1);\n    }\n\n    function peekString(endChar) {\n        var prev_pos = pos;\n        var str = eatString(endChar);\n        pos = prev_pos - 1;\n        next();\n        return str;\n    }\n\n    function eatWhitespace(preserve_newlines_local) {\n        var result = 0;\n        while (whiteRe.test(peek())) {\n            next();\n            if (ch === '\\n' && preserve_newlines_local && preserve_newlines) {\n                output.add_new_line(true);\n                result++;\n            }\n        }\n        newlinesFromLastWSEat = result;\n        return result;\n    }\n\n    function skipWhitespace() {\n        var result = '';\n        if (ch && whiteRe.test(ch)) {\n            result = ch;\n        }\n        while (whiteRe.test(next())) {\n            result += ch;\n        }\n        return result;\n    }\n\n    function eatComment() {\n        var start = pos;\n        var singleLine = peek() === \"/\";\n        next();\n        while (next()) {\n            if (!singleLine && ch === \"*\" && peek() === \"/\") {\n                next();\n                break;\n            } else if (singleLine && ch === \"\\n\") {\n                return source_text.substring(start, pos);\n            }\n        }\n\n        return source_text.substring(start, pos) + ch;\n    }\n\n\n    function lookBack(str) {\n        return source_text.substring(pos - str.length, pos).toLowerCase() ===\n            str;\n    }\n\n    // Nested pseudo-class if we are insideRule\n    // and the next special character found opens\n    // a new block\n    function foundNestedPseudoClass() {\n        var openParen = 0;\n        for (var i = pos + 1; i < source_text.length; i++) {\n            var ch = source_text.charAt(i);\n            if (ch === \"{\") {\n                return true;\n            } else if (ch === '(') {\n                // pseudoclasses can contain ()\n                openParen += 1;\n            } else if (ch === ')') {\n                if (openParen === 0) {\n                    return false;\n                }\n                openParen -= 1;\n            } else if (ch === \";\" || ch === \"}\") {\n                return false;\n            }\n        }\n        return false;\n    }\n\n    // printer\n    var baseIndentString = '';\n    var preindent_index = 0;\n    if (source_text && source_text.length) {\n        while ((source_text.charAt(preindent_index) === ' ' ||\n                source_text.charAt(preindent_index) === '\\t')) {\n            preindent_index += 1;\n        }\n        baseIndentString = source_text.substring(0, preindent_index);\n        source_text = source_text.substring(preindent_index);\n    }\n\n\n    var singleIndent = new Array(indentSize + 1).join(indentCharacter);\n    var indentLevel;\n    var nestedLevel;\n    var output;\n\n    function print_string(output_string) {\n        if (output.just_added_newline()) {\n            output.set_indent(indentLevel);\n        }\n        output.add_token(output_string);\n    }\n\n    function preserveSingleSpace(isAfterSpace) {\n        if (isAfterSpace) {\n            output.space_before_token = true;\n        }\n    }\n\n    function indent() {\n        indentLevel++;\n    }\n\n    function outdent() {\n        if (indentLevel > 0) {\n            indentLevel--;\n        }\n    }\n\n    /*_____________________--------------------_____________________*/\n\n    this.beautify = function() {\n        // reset\n        output = new Output(singleIndent, baseIndentString);\n        indentLevel = 0;\n        nestedLevel = 0;\n\n        pos = -1;\n        ch = null;\n        parenLevel = 0;\n\n        var insideRule = false;\n        var insidePropertyValue = false;\n        var enteringConditionalGroup = false;\n        var top_ch = '';\n        var last_top_ch = '';\n\n        while (true) {\n            var whitespace = skipWhitespace();\n            var isAfterSpace = whitespace !== '';\n            var isAfterNewline = whitespace.indexOf('\\n') !== -1;\n            last_top_ch = top_ch;\n            top_ch = ch;\n\n            if (!ch) {\n                break;\n            } else if (ch === '/' && peek() === '*') { /* css comment */\n                var header = indentLevel === 0;\n\n                if (isAfterNewline || header) {\n                    output.add_new_line();\n                }\n\n                print_string(eatComment());\n                output.add_new_line();\n                if (header) {\n                    output.add_new_line(true);\n                }\n            } else if (ch === '/' && peek() === '/') { // single line comment\n                if (!isAfterNewline && last_top_ch !== '{') {\n                    output.trim(true);\n                }\n                output.space_before_token = true;\n                print_string(eatComment());\n                output.add_new_line();\n            } else if (ch === '@') {\n                preserveSingleSpace(isAfterSpace);\n\n                // deal with less propery mixins @{...}\n                if (peek() === '{') {\n                    print_string(eatString('}'));\n                } else {\n                    print_string(ch);\n\n                    // strip trailing space, if present, for hash property checks\n                    var variableOrRule = peekString(\": ,;{}()[]/='\\\"\");\n\n                    if (variableOrRule.match(/[ :]$/)) {\n                        // we have a variable or pseudo-class, add it and insert one space before continuing\n                        next();\n                        variableOrRule = eatString(\": \").replace(/\\s$/, '');\n                        print_string(variableOrRule);\n                        output.space_before_token = true;\n                    }\n\n                    variableOrRule = variableOrRule.replace(/\\s$/, '');\n\n                    // might be a nesting at-rule\n                    if (variableOrRule in this.NESTED_AT_RULE) {\n                        nestedLevel += 1;\n                        if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {\n                            enteringConditionalGroup = true;\n                        }\n                    }\n                }\n            } else if (ch === '#' && peek() === '{') {\n                preserveSingleSpace(isAfterSpace);\n                print_string(eatString('}'));\n            } else if (ch === '{') {\n                if (peek(true) === '}') {\n                    eatWhitespace();\n                    next();\n                    output.space_before_token = true;\n                    print_string(\"{}\");\n                    if (!eatWhitespace(true)) {\n                        output.add_new_line();\n                    }\n\n                    if (newlinesFromLastWSEat < 2 && newline_between_rules && indentLevel === 0) {\n                        output.add_new_line(true);\n                    }\n                } else {\n                    indent();\n                    output.space_before_token = true;\n                    print_string(ch);\n                    if (!eatWhitespace(true)) {\n                        output.add_new_line();\n                    }\n\n                    // when entering conditional groups, only rulesets are allowed\n                    if (enteringConditionalGroup) {\n                        enteringConditionalGroup = false;\n                        insideRule = (indentLevel > nestedLevel);\n                    } else {\n                        // otherwise, declarations are also allowed\n                        insideRule = (indentLevel >= nestedLevel);\n                    }\n                }\n            } else if (ch === '}') {\n                outdent();\n                output.add_new_line();\n                print_string(ch);\n                insideRule = false;\n                insidePropertyValue = false;\n                if (nestedLevel) {\n                    nestedLevel--;\n                }\n\n                if (!eatWhitespace(true)) {\n                    output.add_new_line();\n                }\n\n                if (newlinesFromLastWSEat < 2 && newline_between_rules && indentLevel === 0) {\n                    output.add_new_line(true);\n                }\n            } else if (ch === \":\") {\n                eatWhitespace();\n                if ((insideRule || enteringConditionalGroup) &&\n                    !(lookBack(\"&\") || foundNestedPseudoClass()) &&\n                    !lookBack(\"(\")) {\n                    // 'property: value' delimiter\n                    // which could be in a conditional group query\n                    print_string(':');\n                    if (!insidePropertyValue) {\n                        insidePropertyValue = true;\n                        output.space_before_token = true;\n                    }\n                } else {\n                    // sass/less parent reference don't use a space\n                    // sass nested pseudo-class don't use a space\n\n                    // preserve space before pseudoclasses/pseudoelements, as it means \"in any child\"\n                    if (lookBack(\" \")) {\n                        output.space_before_token = true;\n                    }\n                    if (peek() === \":\") {\n                        // pseudo-element\n                        next();\n                        print_string(\"::\");\n                    } else {\n                        // pseudo-class\n                        print_string(':');\n                    }\n                }\n            } else if (ch === '\"' || ch === '\\'') {\n                preserveSingleSpace(isAfterSpace);\n                print_string(eatString(ch));\n            } else if (ch === ';') {\n                insidePropertyValue = false;\n                print_string(ch);\n                if (!eatWhitespace(true)) {\n                    output.add_new_line();\n                }\n            } else if (ch === '(') { // may be a url\n                if (lookBack(\"url\")) {\n                    print_string(ch);\n                    eatWhitespace();\n                    if (next()) {\n                        if (ch !== ')' && ch !== '\"' && ch !== '\\'') {\n                            print_string(eatString(')'));\n                        } else {\n                            pos--;\n                        }\n                    }\n                } else {\n                    parenLevel++;\n                    preserveSingleSpace(isAfterSpace);\n                    print_string(ch);\n                    eatWhitespace();\n                }\n            } else if (ch === ')') {\n                print_string(ch);\n                parenLevel--;\n            } else if (ch === ',') {\n                print_string(ch);\n                if (!eatWhitespace(true) && selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {\n                    output.add_new_line();\n                } else {\n                    output.space_before_token = true;\n                }\n            } else if ((ch === '>' || ch === '+' || ch === '~') &&\n                !insidePropertyValue && parenLevel < 1) {\n                //handle combinator spacing\n                if (space_around_combinator) {\n                    output.space_before_token = true;\n                    print_string(ch);\n                    output.space_before_token = true;\n                } else {\n                    print_string(ch);\n                    eatWhitespace();\n                    // squash extra whitespace\n                    if (ch && whiteRe.test(ch)) {\n                        ch = '';\n                    }\n                }\n            } else if (ch === ']') {\n                print_string(ch);\n            } else if (ch === '[') {\n                preserveSingleSpace(isAfterSpace);\n                print_string(ch);\n            } else if (ch === '=') { // no whitespace before or after\n                eatWhitespace();\n                print_string('=');\n                if (whiteRe.test(ch)) {\n                    ch = '';\n                }\n            } else if (ch === '!') { // !important\n                print_string(' ');\n                print_string(ch);\n            } else {\n                preserveSingleSpace(isAfterSpace);\n                print_string(ch);\n            }\n        }\n\n        var sweetCode = output.get_code(end_with_newline, eol);\n\n        return sweetCode;\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n    this.NESTED_AT_RULE = {\n        \"@page\": true,\n        \"@font-face\": true,\n        \"@keyframes\": true,\n        // also in CONDITIONAL_GROUP_RULE below\n        \"@media\": true,\n        \"@supports\": true,\n        \"@document\": true\n    };\n    this.CONDITIONAL_GROUP_RULE = {\n        \"@media\": true,\n        \"@supports\": true,\n        \"@document\": true\n    };\n}\n\nmodule.exports.Beautifier = Beautifier;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/* jshint curly: false */\n// This section of code is taken from acorn.\n//\n// Acorn was written by Marijn Haverbeke and released under an MIT\n// license. The Unicode regexps (for identifiers and whitespace) were\n// taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n// Whether a single character denotes a newline.\n\nexports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n// in javascript, these two differ\n// in python they are the same, different methods are called on them\nexports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\nexports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n// Test whether a given character code starts an identifier.\n\nexports.isIdentifierStart = function(code) {\n    // permit $ (36) and @ (64). @ is used in ES7 decorators.\n    if (code < 65) return code === 36 || code === 64;\n    // 65 through 91 are uppercase letters.\n    if (code < 91) return true;\n    // permit _ (95).\n    if (code < 97) return code === 95;\n    // 97 through 123 are lowercase letters.\n    if (code < 123) return true;\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n};\n\n// Test whether a given character is part of an identifier.\n\nexports.isIdentifierChar = function(code) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nfunction mergeOpts(allOptions, targetType) {\n    var finalOpts = {};\n    var name;\n\n    for (name in allOptions) {\n        if (name !== targetType) {\n            finalOpts[name] = allOptions[name];\n        }\n    }\n\n    //merge in the per type settings for the targetType\n    if (targetType in allOptions) {\n        for (name in allOptions[targetType]) {\n            finalOpts[name] = allOptions[targetType][name];\n        }\n    }\n    return finalOpts;\n}\n\nmodule.exports.mergeOpts = mergeOpts;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction OutputLine(parent) {\n    var _character_count = 0;\n    // use indent_count as a marker for lines that have preserved indentation\n    var _indent_count = -1;\n\n    var _items = [];\n    var _empty = true;\n\n    this.set_indent = function(level) {\n        _character_count = parent.baseIndentLength + level * parent.indent_length;\n        _indent_count = level;\n    };\n\n    this.get_character_count = function() {\n        return _character_count;\n    };\n\n    this.is_empty = function() {\n        return _empty;\n    };\n\n    this.last = function() {\n        if (!this._empty) {\n            return _items[_items.length - 1];\n        } else {\n            return null;\n        }\n    };\n\n    this.push = function(input) {\n        _items.push(input);\n        _character_count += input.length;\n        _empty = false;\n    };\n\n    this.pop = function() {\n        var item = null;\n        if (!_empty) {\n            item = _items.pop();\n            _character_count -= item.length;\n            _empty = _items.length === 0;\n        }\n        return item;\n    };\n\n    this.remove_indent = function() {\n        if (_indent_count > 0) {\n            _indent_count -= 1;\n            _character_count -= parent.indent_length;\n        }\n    };\n\n    this.trim = function() {\n        while (this.last() === ' ') {\n            _items.pop();\n            _character_count -= 1;\n        }\n        _empty = _items.length === 0;\n    };\n\n    this.toString = function() {\n        var result = '';\n        if (!this._empty) {\n            if (_indent_count >= 0) {\n                result = parent.indent_cache[_indent_count];\n            }\n            result += _items.join('');\n        }\n        return result;\n    };\n}\n\nfunction Output(indent_string, baseIndentString) {\n    baseIndentString = baseIndentString || '';\n    this.indent_cache = [baseIndentString];\n    this.baseIndentLength = baseIndentString.length;\n    this.indent_length = indent_string.length;\n    this.raw = false;\n\n    var lines = [];\n    this.baseIndentString = baseIndentString;\n    this.indent_string = indent_string;\n    this.previous_line = null;\n    this.current_line = null;\n    this.space_before_token = false;\n\n    this.add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = new OutputLine(this);\n        lines.push(this.current_line);\n    };\n\n    // initialize\n    this.add_outputline();\n\n\n    this.get_line_number = function() {\n        return lines.length;\n    };\n\n    // Using object instead of string to allow for later expansion of info about each line\n    this.add_new_line = function(force_newline) {\n        if (this.get_line_number() === 1 && this.just_added_newline()) {\n            return false; // no newline on start of file\n        }\n\n        if (force_newline || !this.just_added_newline()) {\n            if (!this.raw) {\n                this.add_outputline();\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n    this.get_code = function(end_with_newline, eol) {\n        var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n\n        if (end_with_newline) {\n            sweet_code += '\\n';\n        }\n\n        if (eol !== '\\n') {\n            sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n\n        return sweet_code;\n    };\n\n    this.set_indent = function(level) {\n        // Never indent your first output indent at the start of the file\n        if (lines.length > 1) {\n            while (level >= this.indent_cache.length) {\n                this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n            }\n\n            this.current_line.set_indent(level);\n            return true;\n        }\n        this.current_line.set_indent(0);\n        return false;\n    };\n\n    this.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n            this.add_outputline();\n        }\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n    };\n\n    this.add_token = function(printable_token) {\n        this.add_space_before_token();\n        this.current_line.push(printable_token);\n    };\n\n    this.add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n            this.current_line.push(' ');\n        }\n        this.space_before_token = false;\n    };\n\n    this.remove_indent = function(index) {\n        var output_length = lines.length;\n        while (index < output_length) {\n            lines[index].remove_indent();\n            index++;\n        }\n    };\n\n    this.trim = function(eat_newlines) {\n        eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n        this.current_line.trim(indent_string, baseIndentString);\n\n        while (eat_newlines && lines.length > 1 &&\n            this.current_line.is_empty()) {\n            lines.pop();\n            this.current_line = lines[lines.length - 1];\n            this.current_line.trim();\n        }\n\n        this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n    };\n\n    this.just_added_newline = function() {\n        return this.current_line.is_empty();\n    };\n\n    this.just_added_blankline = function() {\n        if (this.just_added_newline()) {\n            if (lines.length === 1) {\n                return true; // start of the file and newline = blank\n            }\n\n            var line = lines[lines.length - 2];\n            return line.is_empty();\n        }\n        return false;\n    };\n}\n\nmodule.exports.Output = Output;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar Beautifier = __webpack_require__(0).Beautifier;\n\nfunction css_beautify(source_text, options) {\n    var beautifier = new Beautifier(source_text, options);\n    return beautifier.beautify();\n}\n\nmodule.exports = css_beautify;\n\n/***/ })\n/******/ ]);\nvar css_beautify = legacy_beautify_css;\n/* Footer */\nif (typeof define === \"function\" && define.amd) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    define([], function() {\n        return {\n            css_beautify: css_beautify\n        };\n    });\n} else if (typeof exports !== \"undefined\") {\n    // Add support for CommonJS. Just put this file somewhere on your require.paths\n    // and you will be able to `var html_beautify = require(\"beautify\").html_beautify`.\n    exports.css_beautify = css_beautify;\n} else if (typeof window !== \"undefined\") {\n    // If we're running a web page and don't have either of the above, add our one global\n    window.css_beautify = css_beautify;\n} else if (typeof global !== \"undefined\") {\n    // If we don't even have window, try global.\n    global.css_beautify = css_beautify;\n}\n\n}());\n","'use strict';\n\nfunction extend (destination) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) destination[key] = source[key];\n    }\n  }\n  return destination\n}\n\nfunction repeat (character, count) {\n  return Array(count + 1).join(character)\n}\n\nvar blockElements = [\n  'address', 'article', 'aside', 'audio', 'blockquote', 'body', 'canvas',\n  'center', 'dd', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption',\n  'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n  'header', 'hgroup', 'hr', 'html', 'isindex', 'li', 'main', 'menu', 'nav',\n  'noframes', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table',\n  'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\n];\n\nfunction isBlock (node) {\n  return blockElements.indexOf(node.nodeName.toLowerCase()) !== -1\n}\n\nvar voidElements = [\n  'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',\n  'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'\n];\n\nfunction isVoid (node) {\n  return voidElements.indexOf(node.nodeName.toLowerCase()) !== -1\n}\n\nvar voidSelector = voidElements.join();\nfunction hasVoid (node) {\n  return node.querySelector && node.querySelector(voidSelector)\n}\n\nvar rules = {};\n\nrules.paragraph = {\n  filter: 'p',\n\n  replacement: function (content) {\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.lineBreak = {\n  filter: 'br',\n\n  replacement: function (content, node, options) {\n    return options.br + '\\n'\n  }\n};\n\nrules.heading = {\n  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n  replacement: function (content, node, options) {\n    var hLevel = Number(node.nodeName.charAt(1));\n\n    if (options.headingStyle === 'setext' && hLevel < 3) {\n      var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\n      return (\n        '\\n\\n' + content + '\\n' + underline + '\\n\\n'\n      )\n    } else {\n      return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.blockquote = {\n  filter: 'blockquote',\n\n  replacement: function (content) {\n    content = content.replace(/^\\n+|\\n+$/g, '');\n    content = content.replace(/^/gm, '> ');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.list = {\n  filter: ['ul', 'ol'],\n\n  replacement: function (content, node) {\n    var parent = node.parentNode;\n    if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\n      return '\\n' + content\n    } else {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.listItem = {\n  filter: 'li',\n\n  replacement: function (content, node, options) {\n    content = content\n      .replace(/^\\n+/, '') // remove leading newlines\n      .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n      .replace(/\\n/gm, '\\n    '); // indent\n    var prefix = options.bulletListMarker + '   ';\n    var parent = node.parentNode;\n    if (parent.nodeName === 'OL') {\n      var start = parent.getAttribute('start');\n      var index = Array.prototype.indexOf.call(parent.children, node);\n      prefix = (start ? Number(start) + index : index + 1) + '.  ';\n    }\n    return (\n      prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\n    )\n  }\n};\n\nrules.indentedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'indented' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    return (\n      '\\n\\n    ' +\n      node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\n      '\\n\\n'\n    )\n  }\n};\n\nrules.fencedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'fenced' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var className = node.firstChild.className || '';\n    var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n\n    return (\n      '\\n\\n' + options.fence + language + '\\n' +\n      node.firstChild.textContent +\n      '\\n' + options.fence + '\\n\\n'\n    )\n  }\n};\n\nrules.horizontalRule = {\n  filter: 'hr',\n\n  replacement: function (content, node, options) {\n    return '\\n\\n' + options.hr + '\\n\\n'\n  }\n};\n\nrules.inlineLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'inlined' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node) {\n    var href = node.getAttribute('href');\n    var title = node.title ? ' \"' + node.title + '\"' : '';\n    return '[' + content + '](' + href + title + ')'\n  }\n};\n\nrules.referenceLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'referenced' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var href = node.getAttribute('href');\n    var title = node.title ? ' \"' + node.title + '\"' : '';\n    var replacement;\n    var reference;\n\n    switch (options.linkReferenceStyle) {\n      case 'collapsed':\n        replacement = '[' + content + '][]';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      case 'shortcut':\n        replacement = '[' + content + ']';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      default:\n        var id = this.references.length + 1;\n        replacement = '[' + content + '][' + id + ']';\n        reference = '[' + id + ']: ' + href + title;\n    }\n\n    this.references.push(reference);\n    return replacement\n  },\n\n  references: [],\n\n  append: function (options) {\n    var references = '';\n    if (this.references.length) {\n      references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n      this.references = []; // Reset references\n    }\n    return references\n  }\n};\n\nrules.emphasis = {\n  filter: ['em', 'i'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.emDelimiter + content + options.emDelimiter\n  }\n};\n\nrules.strong = {\n  filter: ['strong', 'b'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.strongDelimiter + content + options.strongDelimiter\n  }\n};\n\nrules.code = {\n  filter: function (node) {\n    var hasSiblings = node.previousSibling || node.nextSibling;\n    var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n    return node.nodeName === 'CODE' && !isCodeBlock\n  },\n\n  replacement: function (content) {\n    if (!content.trim()) return ''\n\n    var delimiter = '`';\n    var leadingSpace = '';\n    var trailingSpace = '';\n    var matches = content.match(/`+/gm);\n    if (matches) {\n      if (/^`/.test(content)) leadingSpace = ' ';\n      if (/`$/.test(content)) trailingSpace = ' ';\n      while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n    }\n\n    return delimiter + leadingSpace + content + trailingSpace + delimiter\n  }\n};\n\nrules.image = {\n  filter: 'img',\n\n  replacement: function (content, node) {\n    var alt = node.alt || '';\n    var src = node.getAttribute('src') || '';\n    var title = node.title || '';\n    var titlePart = title ? ' \"' + title + '\"' : '';\n    return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\n  }\n};\n\n/**\n * Manages a collection of rules used to convert HTML to Markdown\n */\n\nfunction Rules (options) {\n  this.options = options;\n  this._keep = [];\n  this._remove = [];\n\n  this.blankRule = {\n    replacement: options.blankReplacement\n  };\n\n  this.keepReplacement = options.keepReplacement;\n\n  this.defaultRule = {\n    replacement: options.defaultReplacement\n  };\n\n  this.array = [];\n  for (var key in options.rules) this.array.push(options.rules[key]);\n}\n\nRules.prototype = {\n  add: function (key, rule) {\n    this.array.unshift(rule);\n  },\n\n  keep: function (filter) {\n    this._keep.unshift({\n      filter: filter,\n      replacement: this.keepReplacement\n    });\n  },\n\n  remove: function (filter) {\n    this._remove.unshift({\n      filter: filter,\n      replacement: function () {\n        return ''\n      }\n    });\n  },\n\n  forNode: function (node) {\n    if (node.isBlank) return this.blankRule\n    var rule;\n\n    if ((rule = findRule(this.array, node, this.options))) return rule\n    if ((rule = findRule(this._keep, node, this.options))) return rule\n    if ((rule = findRule(this._remove, node, this.options))) return rule\n\n    return this.defaultRule\n  },\n\n  forEach: function (fn) {\n    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n  }\n};\n\nfunction findRule (rules, node, options) {\n  for (var i = 0; i < rules.length; i++) {\n    var rule = rules[i];\n    if (filterValue(rule, node, options)) return rule\n  }\n  return void 0\n}\n\nfunction filterValue (rule, node, options) {\n  var filter = rule.filter;\n  if (typeof filter === 'string') {\n    if (filter === node.nodeName.toLowerCase()) return true\n  } else if (Array.isArray(filter)) {\n    if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\n  } else if (typeof filter === 'function') {\n    if (filter.call(rule, node, options)) return true\n  } else {\n    throw new TypeError('`filter` needs to be a string, array, or function')\n  }\n}\n\n/**\n * The collapseWhitespace function is adapted from collapse-whitespace\n * by Luc Thevenard.\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n *\n * @param {Object} options\n */\nfunction collapseWhitespace (options) {\n  var element = options.element;\n  var isBlock = options.isBlock;\n  var isVoid = options.isVoid;\n  var isPre = options.isPre || function (node) {\n    return node.nodeName === 'PRE'\n  };\n\n  if (!element.firstChild || isPre(element)) return\n\n  var prevText = null;\n  var prevVoid = false;\n\n  var prev = null;\n  var node = next(prev, element, isPre);\n\n  while (node !== element) {\n    if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n      var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\n\n      if ((!prevText || / $/.test(prevText.data)) &&\n          !prevVoid && text[0] === ' ') {\n        text = text.substr(1);\n      }\n\n      // `text` might be empty at this point.\n      if (!text) {\n        node = remove(node);\n        continue\n      }\n\n      node.data = text;\n\n      prevText = node;\n    } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\n      if (isBlock(node) || node.nodeName === 'BR') {\n        if (prevText) {\n          prevText.data = prevText.data.replace(/ $/, '');\n        }\n\n        prevText = null;\n        prevVoid = false;\n      } else if (isVoid(node)) {\n        // Avoid trimming space around non-block, non-BR void elements.\n        prevText = null;\n        prevVoid = true;\n      }\n    } else {\n      node = remove(node);\n      continue\n    }\n\n    var nextNode = next(prev, node, isPre);\n    prev = node;\n    node = nextNode;\n  }\n\n  if (prevText) {\n    prevText.data = prevText.data.replace(/ $/, '');\n    if (!prevText.data) {\n      remove(prevText);\n    }\n  }\n}\n\n/**\n * remove(node) removes the given node from the DOM and returns the\n * next node in the sequence.\n *\n * @param {Node} node\n * @return {Node} node\n */\nfunction remove (node) {\n  var next = node.nextSibling || node.parentNode;\n\n  node.parentNode.removeChild(node);\n\n  return next\n}\n\n/**\n * next(prev, current, isPre) returns the next node in the sequence, given the\n * current and previous nodes.\n *\n * @param {Node} prev\n * @param {Node} current\n * @param {Function} isPre\n * @return {Node}\n */\nfunction next (prev, current, isPre) {\n  if ((prev && prev.parentNode === current) || isPre(current)) {\n    return current.nextSibling || current.parentNode\n  }\n\n  return current.firstChild || current.nextSibling || current.parentNode\n}\n\n/*\n * Set up window for Node.js\n */\n\nvar root = (typeof window !== 'undefined' ? window : {});\n\n/*\n * Parsing HTML strings\n */\n\nfunction canParseHTMLNatively () {\n  var Parser = root.DOMParser;\n  var canParse = false;\n\n  // Adapted from https://gist.github.com/1129031\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if (new Parser().parseFromString('', 'text/html')) {\n      canParse = true;\n    }\n  } catch (e) {}\n\n  return canParse\n}\n\nfunction createHTMLParser () {\n  var Parser = function () {};\n\n  {\n    var JSDOM = require('jsdom').JSDOM;\n    Parser.prototype.parseFromString = function (string) {\n      return new JSDOM(string).window.document\n    };\n  }\n  return Parser\n}\n\nvar HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\n\nfunction RootNode (input) {\n  var root;\n  if (typeof input === 'string') {\n    var doc = htmlParser().parseFromString(\n      // DOM parsers arrange elements in the <head> and <body>.\n      // Wrapping in a custom element ensures elements are reliably arranged in\n      // a single element.\n      '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\n      'text/html'\n    );\n    root = doc.getElementById('turndown-root');\n  } else {\n    root = input.cloneNode(true);\n  }\n  collapseWhitespace({\n    element: root,\n    isBlock: isBlock,\n    isVoid: isVoid\n  });\n\n  return root\n}\n\nvar _htmlParser;\nfunction htmlParser () {\n  _htmlParser = _htmlParser || new HTMLParser();\n  return _htmlParser\n}\n\nfunction Node (node) {\n  node.isBlock = isBlock(node);\n  node.isCode = node.nodeName.toLowerCase() === 'code' || node.parentNode.isCode;\n  node.isBlank = isBlank(node);\n  node.flankingWhitespace = flankingWhitespace(node);\n  return node\n}\n\nfunction isBlank (node) {\n  return (\n    ['A', 'TH', 'TD', 'IFRAME', 'SCRIPT', 'AUDIO', 'VIDEO'].indexOf(node.nodeName) === -1 &&\n    /^\\s*$/i.test(node.textContent) &&\n    !isVoid(node) &&\n    !hasVoid(node)\n  )\n}\n\nfunction flankingWhitespace (node) {\n  var leading = '';\n  var trailing = '';\n\n  if (!node.isBlock) {\n    var hasLeading = /^[ \\r\\n\\t]/.test(node.textContent);\n    var hasTrailing = /[ \\r\\n\\t]$/.test(node.textContent);\n\n    if (hasLeading && !isFlankedByWhitespace('left', node)) {\n      leading = ' ';\n    }\n    if (hasTrailing && !isFlankedByWhitespace('right', node)) {\n      trailing = ' ';\n    }\n  }\n\n  return { leading: leading, trailing: trailing }\n}\n\nfunction isFlankedByWhitespace (side, node) {\n  var sibling;\n  var regExp;\n  var isFlanked;\n\n  if (side === 'left') {\n    sibling = node.previousSibling;\n    regExp = / $/;\n  } else {\n    sibling = node.nextSibling;\n    regExp = /^ /;\n  }\n\n  if (sibling) {\n    if (sibling.nodeType === 3) {\n      isFlanked = regExp.test(sibling.nodeValue);\n    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\n      isFlanked = regExp.test(sibling.textContent);\n    }\n  }\n  return isFlanked\n}\n\nvar reduce = Array.prototype.reduce;\nvar leadingNewLinesRegExp = /^\\n*/;\nvar trailingNewLinesRegExp = /\\n*$/;\nvar escapes = [\n  [/\\\\/g, '\\\\\\\\'],\n  [/\\*/g, '\\\\*'],\n  [/-/g, '\\\\-'],\n  [/^\\+ /g, '\\\\+ '],\n  [/^(=+)/g, '\\\\$1'],\n  [/^(#{1,6}) /g, '\\\\$1 '],\n  [/`/g, '\\\\`'],\n  [/^~~~/g, '\\\\~~~'],\n  [/\\[/g, '\\\\['],\n  [/\\]/g, '\\\\]'],\n  [/^>/g, '\\\\>'],\n  [/_/g, '\\\\_'],\n  [/^(\\d+)\\. /g, '$1\\\\. ']\n];\n\nfunction TurndownService (options) {\n  if (!(this instanceof TurndownService)) return new TurndownService(options)\n\n  var defaults = {\n    rules: rules,\n    headingStyle: 'setext',\n    hr: '* * *',\n    bulletListMarker: '*',\n    codeBlockStyle: 'indented',\n    fence: '```',\n    emDelimiter: '_',\n    strongDelimiter: '**',\n    linkStyle: 'inlined',\n    linkReferenceStyle: 'full',\n    br: '  ',\n    blankReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' : ''\n    },\n    keepReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\n    },\n    defaultReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\n    }\n  };\n  this.options = extend({}, defaults, options);\n  this.rules = new Rules(this.options);\n}\n\nTurndownService.prototype = {\n  /**\n   * The entry point for converting a string or DOM node to Markdown\n   * @public\n   * @param {String|HTMLElement} input The string or DOM node to convert\n   * @returns A Markdown representation of the input\n   * @type String\n   */\n\n  turndown: function (input) {\n    if (!canConvert(input)) {\n      throw new TypeError(\n        input + ' is not a string, or an element/document/fragment node.'\n      )\n    }\n\n    if (input === '') return ''\n\n    var output = process.call(this, new RootNode(input));\n    return postProcess.call(this, output)\n  },\n\n  /**\n   * Add one or more plugins\n   * @public\n   * @param {Function|Array} plugin The plugin or array of plugins to add\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  use: function (plugin) {\n    if (Array.isArray(plugin)) {\n      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n    } else if (typeof plugin === 'function') {\n      plugin(this);\n    } else {\n      throw new TypeError('plugin must be a Function or an Array of Functions')\n    }\n    return this\n  },\n\n  /**\n   * Adds a rule\n   * @public\n   * @param {String} key The unique key of the rule\n   * @param {Object} rule The rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  addRule: function (key, rule) {\n    this.rules.add(key, rule);\n    return this\n  },\n\n  /**\n   * Keep a node (as HTML) that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  keep: function (filter) {\n    this.rules.keep(filter);\n    return this\n  },\n\n  /**\n   * Remove a node that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  remove: function (filter) {\n    this.rules.remove(filter);\n    return this\n  },\n\n  /**\n   * Escapes Markdown syntax\n   * @public\n   * @param {String} string The string to escape\n   * @returns A string with Markdown syntax escaped\n   * @type String\n   */\n\n  escape: function (string) {\n    return escapes.reduce(function (accumulator, escape) {\n      return accumulator.replace(escape[0], escape[1])\n    }, string)\n  }\n};\n\n/**\n * Reduces a DOM node down to its Markdown string equivalent\n * @private\n * @param {HTMLElement} parentNode The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction process (parentNode) {\n  var self = this;\n  return reduce.call(parentNode.childNodes, function (output, node) {\n    node = new Node(node);\n\n    var replacement = '';\n    if (node.nodeType === 3) {\n      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\n    } else if (node.nodeType === 1) {\n      replacement = replacementForNode.call(self, node);\n    }\n\n    return join(output, replacement)\n  }, '')\n}\n\n/**\n * Appends strings as each rule requires and trims the output\n * @private\n * @param {String} output The conversion output\n * @returns A trimmed version of the ouput\n * @type String\n */\n\nfunction postProcess (output) {\n  var self = this;\n  this.rules.forEach(function (rule) {\n    if (typeof rule.append === 'function') {\n      output = join(output, rule.append(self.options));\n    }\n  });\n\n  return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\n}\n\n/**\n * Converts an element node to its Markdown equivalent\n * @private\n * @param {HTMLElement} node The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction replacementForNode (node) {\n  var rule = this.rules.forNode(node);\n  var content = process.call(this, node);\n  var whitespace = node.flankingWhitespace;\n  if (whitespace.leading || whitespace.trailing) content = content.trim();\n  return (\n    whitespace.leading +\n    rule.replacement(content, node, this.options) +\n    whitespace.trailing\n  )\n}\n\n/**\n * Determines the new lines between the current output and the replacement\n * @private\n * @param {String} output The current conversion output\n * @param {String} replacement The string to append to the output\n * @returns The whitespace to separate the current output and the replacement\n * @type String\n */\n\nfunction separatingNewlines (output, replacement) {\n  var newlines = [\n    output.match(trailingNewLinesRegExp)[0],\n    replacement.match(leadingNewLinesRegExp)[0]\n  ].sort();\n  var maxNewlines = newlines[newlines.length - 1];\n  return maxNewlines.length < 2 ? maxNewlines : '\\n\\n'\n}\n\nfunction join (string1, string2) {\n  var separator = separatingNewlines(string1, string2);\n\n  // Remove trailing/leading newlines and replace with separator\n  string1 = string1.replace(trailingNewLinesRegExp, '');\n  string2 = string2.replace(leadingNewLinesRegExp, '');\n\n  return string1 + separator + string2\n}\n\n/**\n * Determines whether an input can be converted\n * @private\n * @param {String|HTMLElement} input Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\nfunction canConvert (input) {\n  return (\n    input != null && (\n      typeof input === 'string' ||\n      (input.nodeType && (\n        input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\n      ))\n    )\n  )\n}\n\nmodule.exports = TurndownService;\n","import { convertUrlToAbsoluteURL } from '../../../url/formatted/absolute'\n\nfunction isRelativeUrl(url: string) {\n  try {\n    const obj = new URL(url)\n    return false\n  } catch (e) {\n    return true\n  }\n}\n\nexport function convertHtmlToAbsoluteLinkHTML(html: string, baseUrl: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  fragment.querySelectorAll('[href]')\n    .forEach(ele => {\n      const url = ele.getAttribute('href') as string\n      if (isRelativeUrl(url)) {\n        ele.setAttribute('href', convertUrlToAbsoluteURL(url, baseUrl))\n      }\n    })\n  fragment.querySelectorAll('[src]')\n    .forEach(ele => {\n      const url = ele.getAttribute('src') as string\n      if (isRelativeUrl(url)) {\n        ele.setAttribute('src', convertUrlToAbsoluteURL(url, baseUrl))\n      }\n    })\n  return template.innerHTML\n}\n\nexport default convertHtmlToAbsoluteLinkHTML\n","import { convertUrlToRelativeURL } from '../../../url/formatted/relative'\n\nfunction isAbsoluteURL(url: string) {\n  try {\n    const obj = new URL(url)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport function convertHtmlToRelativeLinkHTML(html: string, baseUrl: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  fragment.querySelectorAll('[href]')\n    .forEach(ele => {\n      const url = ele.getAttribute('href') as string\n      if (isAbsoluteURL(url)) {\n        ele.setAttribute('href', convertUrlToRelativeURL(url, baseUrl))\n      }\n    })\n  fragment.querySelectorAll('[src]')\n    .forEach(ele => {\n      const url = ele.getAttribute('src') as string\n      if (isAbsoluteURL(url)) {\n        ele.setAttribute('src', convertUrlToRelativeURL(url, baseUrl))\n      }\n    })\n  return template.innerHTML\n}\n\nexport default convertHtmlToRelativeLinkHTML\n","import { convertUrlToRootRelativeURL } from '../../../url/formatted/root-relative'\n\nexport function convertHtmlToRootRelativeLinkHTML(html: string, baseUrl: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  fragment.querySelectorAll('[href]')\n    .forEach(ele => {\n      const url = ele.getAttribute('href') as string\n      ele.setAttribute('href', convertUrlToRootRelativeURL(url, baseUrl))\n    })\n  fragment.querySelectorAll('[src]')\n    .forEach(ele => {\n      const url = ele.getAttribute('src') as string\n      ele.setAttribute('src', convertUrlToRootRelativeURL(url, baseUrl))\n    })\n  return template.innerHTML\n}\n\nexport default convertHtmlToRootRelativeLinkHTML\n","import TurndownService = require('turndown/lib/turndown.cjs')\n\nfunction createTurndownService(options: Turndown.TurndownServiceOptions = {}) {\n  return new TurndownService({\n    headingStyle: 'atx'\n  , hr: '---'\n  , bulletListMarker: '*'\n  , codeBlockStyle: 'fenced'\n  , fence: '```'\n  , emDelimiter: '*'\n  , strongDelimiter: '**'\n  , linkStyle: 'inlined'\n  , keepReplacement(content: string): string {\n      return content\n    }\n  }).addRule('strikethrough', {\n    filter: ['del', 's', 'strike'],\n    replacement(content) {\n      return '~~' + content + '~~'\n    }\n  })\n}\n\nexport function convertHtmlToCommonmarkMarkdown(html: string): string {\n  const turndownService = createTurndownService()\n  return turndownService.turndown(html)\n}\n","import TurndownService = require('turndown/lib/turndown.cjs')\nimport { gfm } from 'turndown-plugin-gfm'\n\nfunction createTurndownService(options: Turndown.TurndownServiceOptions = {}) {\n  return new TurndownService({\n    headingStyle: 'atx'\n  , hr: '---'\n  , bulletListMarker: '*'\n  , codeBlockStyle: 'fenced'\n  , fence: '```'\n  , emDelimiter: '*'\n  , strongDelimiter: '**'\n  , linkStyle: 'inlined'\n  , keepReplacement(content: string): string {\n      return content\n    }\n  }).use(gfm)\n}\n\nexport function convertHtmlToGfmMarkdown(html: string): string {\n  const turndownService = createTurndownService()\n  return turndownService.turndown(html)\n}\n","var highlightRegExp = /highlight-(?:text|source)-([a-z0-9]+)/;\n\nfunction highlightedCodeBlock (turndownService) {\n  turndownService.addRule('highlightedCodeBlock', {\n    filter: function (node) {\n      var firstChild = node.firstChild;\n      return (\n        node.nodeName === 'DIV' &&\n        highlightRegExp.test(node.className) &&\n        firstChild &&\n        firstChild.nodeName === 'PRE'\n      )\n    },\n    replacement: function (content, node, options) {\n      var className = node.className || '';\n      var language = (className.match(highlightRegExp) || [null, ''])[1];\n\n      return (\n        '\\n\\n' + options.fence + language + '\\n' +\n        node.firstChild.textContent +\n        '\\n' + options.fence + '\\n\\n'\n      )\n    }\n  });\n}\n\nfunction strikethrough (turndownService) {\n  turndownService.addRule('strikethrough', {\n    filter: ['del', 's', 'strike'],\n    replacement: function (content) {\n      return '~' + content + '~'\n    }\n  });\n}\n\nvar indexOf = Array.prototype.indexOf;\nvar every = Array.prototype.every;\nvar rules = {};\n\nrules.tableCell = {\n  filter: ['th', 'td'],\n  replacement: function (content, node) {\n    return cell(content, node)\n  }\n};\n\nrules.tableRow = {\n  filter: 'tr',\n  replacement: function (content, node) {\n    var borderCells = '';\n    var alignMap = { left: ':--', right: '--:', center: ':-:' };\n\n    if (isHeadingRow(node)) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        var border = '---';\n        var align = (\n          node.childNodes[i].getAttribute('align') || ''\n        ).toLowerCase();\n\n        if (align) border = alignMap[align] || border;\n\n        borderCells += cell(border, node.childNodes[i]);\n      }\n    }\n    return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n  }\n};\n\nrules.table = {\n  // Only convert tables with a heading row.\n  // Tables with no heading row are kept using `keep` (see below).\n  filter: function (node) {\n    return node.nodeName === 'TABLE' && isHeadingRow(node.rows[0])\n  },\n\n  replacement: function (content) {\n    // Ensure there are no blank lines\n    content = content.replace('\\n\\n', '\\n');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.tableSection = {\n  filter: ['thead', 'tbody', 'tfoot'],\n  replacement: function (content) {\n    return content\n  }\n};\n\n// A tr is a heading row if:\n// - the parent is a THEAD\n// - or if its the first child of the TABLE or the first TBODY (possibly\n//   following a blank THEAD)\n// - and every cell is a TH\nfunction isHeadingRow (tr) {\n  var parentNode = tr.parentNode;\n  return (\n    parentNode.nodeName === 'THEAD' ||\n    (\n      parentNode.firstChild === tr &&\n      (parentNode.nodeName === 'TABLE' || isFirstTbody(parentNode)) &&\n      every.call(tr.childNodes, function (n) { return n.nodeName === 'TH' })\n    )\n  )\n}\n\nfunction isFirstTbody (element) {\n  var previousSibling = element.previousSibling;\n  return (\n    element.nodeName === 'TBODY' && (\n      !previousSibling ||\n      (\n        previousSibling.nodeName === 'THEAD' &&\n        /^\\s*$/i.test(previousSibling.textContent)\n      )\n    )\n  )\n}\n\nfunction cell (content, node) {\n  var index = indexOf.call(node.parentNode.childNodes, node);\n  var prefix = ' ';\n  if (index === 0) prefix = '| ';\n  return prefix + content + ' |'\n}\n\nfunction tables (turndownService) {\n  turndownService.keep(function (node) {\n    return node.nodeName === 'TABLE' && !isHeadingRow(node.rows[0])\n  });\n  for (var key in rules) turndownService.addRule(key, rules[key]);\n}\n\nfunction taskListItems (turndownService) {\n  turndownService.addRule('taskListItems', {\n    filter: function (node) {\n      return node.type === 'checkbox' && node.parentNode.nodeName === 'LI'\n    },\n    replacement: function (content, node) {\n      return (node.checked ? '[x]' : '[ ]') + ' '\n    }\n  });\n}\n\nfunction gfm (turndownService) {\n  turndownService.use([\n    highlightedCodeBlock,\n    strikethrough,\n    tables,\n    taskListItems\n  ]);\n}\n\nexport { gfm, highlightedCodeBlock, strikethrough, tables, taskListItems };\n","import TurndownService = require('turndown/lib/turndown.cjs')\nimport { tables, highlightedCodeBlock } from 'turndown-plugin-gfm'\n\nfunction createTurndownService(options: Turndown.TurndownServiceOptions = {}) {\n  return new TurndownService({\n    headingStyle: 'atx'\n  , hr: '---'\n  , bulletListMarker: '*'\n  , codeBlockStyle: 'fenced'\n  , fence: '```'\n  , emDelimiter: '*'\n  , strongDelimiter: '**'\n  , linkStyle: 'inlined'\n  , keepReplacement(content: string): string {\n      return content\n    }\n  }).use(tables)\n    .use(highlightedCodeBlock)\n    .addRule('strikethrough', {\n      filter: ['del', 's', 'strike'],\n      replacement(content) {\n        return '~~' + content + '~~'\n      }\n    })\n}\n\nexport function convertHtmlToGhostMarkdown(html: string): string {\n  const turndownService = createTurndownService()\n  return turndownService.turndown(html)\n}\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","export const TAB_URL_TO_PLAIN = 'TAB_URL_TO_PLAIN'\nexport const TAB_URL_TO_MARKDOWN = 'TAB_URL_TO_MARKDOWN'\nexport const TAB_URL_TO_HTML = 'TAB_URL_TO_HTML'\nexport const TAB_URL_TO_BBCODE = 'TAB_URL_TO_BBCODE'\n\nexport const FRAME_URL_TO_PLAIN = 'FRAME_URL_TO_PLAIN'\nexport const FRAME_URL_TO_MARKDOWN = 'FRAME_URL_TO_MARKDOWN'\nexport const FRAME_URL_TO_HTML = 'FRAME_URL_TO_HTML'\nexport const FRAME_URL_TO_BBCODE = 'FRAME_URL_TO_BBCODE'\n\nexport const LINK_TO_MARKDOWN = 'LINK_TO_MARKDOWN'\nexport const LINK_TO_HTML = 'LINK_TO_HTML'\nexport const LINK_TO_BBCODE = 'LINK_TO_BBCODE'\n\nexport const SELECTION_TO_MARKDOWN = 'SELECTION_TO_MARKDOWN'\n\nexport const SELECTION_TO_HTML = 'SELECTION_TO_HTML'\nexport const SELECTION_TO_HTML_ONLY_A_TAG = 'SELECTION_TO_HTML_ONLY_A_TAG'\nexport const SELECTION_TO_HTML_NO_ATTR = 'SELECTION_TO_HTML_NO_ATTR'\n\nexport const SELECTION_TO_BBCODE = 'SELECTION_TO_BBCODE'\nexport const SELECTION_TO_PLAIN = 'SELECTION_TO_PLAIN'\nexport const SELECTION_TO_PLAIN_TRIMMED = 'SELECTION_TO_PLAIN_TRIMMED'\nexport const SELECTION_TO_RAW_STRING = 'SELECTION_TO_RAW_STRING'\n\nexport const IMAGE_TO_MARKDOWN = 'IMAGE_TO_MARKDOWN'\nexport const IMAGE_TO_MARKDOWN_DATA_URI_JPEG = 'IMAGE_TO_MARKDOWN_DATA_URI_JPEG'\nexport const IMAGE_TO_MARKDOWN_DATA_URI_PNG = 'IMAGE_TO_MARKDOWN_DATA_URI_PNG'\nexport const IMAGE_TO_MARKDOWN_DATA_URI_WEBP = 'IMAGE_TO_MARKDOWN_DATA_URI_WEBP'\n\nexport const IMAGE_TO_HTML = 'IMAGE_TO_HTML'\nexport const IMAGE_TO_HTML_DATA_URI_JPEG = 'IMAGE_TO_HTML_DATA_URI_JPEG'\nexport const IMAGE_TO_HTML_DATA_URI_PNG = 'IMAGE_TO_HTML_DATA_URI_PNG'\nexport const IMAGE_TO_HTML_DATA_URI_WEBP = 'IMAGE_TO_HTML_DATA_URI_WEBP'\n\nexport const IMAGE_TO_BBCODE = 'IMAGE_TO_BBCODE'\n\nexport const IMAGE_TO_DATA_URI_RAW = 'IMAGE_TO_DATA_URI_RAW'\nexport const IMAGE_TO_DATA_URI_JPEG = 'IMAGE_TO_DATA_URI_JPEG'\nexport const IMAGE_TO_DATA_URI_PNG = 'IMAGE_TO_DATA_URI_PNG'\nexport const IMAGE_TO_DATA_URI_WEBP = 'IMAGE_TO_DATA_URI_WEBP'\n\nexport const AUDIO_TO_HTML = 'AUDIO_TO_HTML'\nexport const VIDEO_TO_HTML = 'VIDEO_TO_HTML'\n","import handlers, { ContextMenusClickHandler, CommandComplicateHandler } from './handlers'\r\nimport menus from './menus'\r\n\r\nasync function writeTextToClipboard(text: string) {\r\n  try {\r\n    return await navigator.clipboard.writeText(text)\r\n  } catch (e) {\r\n    const textarea = document.createElement('textarea')\r\n    textarea.textContent = text\r\n    document.body.appendChild(textarea)\r\n    textarea.select()\r\n    document.execCommand('Copy', false, null)\r\n    document.body.removeChild(textarea)\r\n  }\r\n}\r\n\r\nasync function queryAllInjectableTabs(): Promise<browser.tabs.Tab[]> {\r\n  const invalidList = [\r\n    'about:'\r\n  , 'browser:'\r\n  , 'view-source:'\r\n  , 'chrome:'\r\n  , 'chrome-error:'\r\n  , 'https://chrome.google.com/'\r\n  ]\r\n  const tabs = await browser.tabs.query({})\r\n  return tabs.filter(({ url = '' }) => {\r\n    return invalidList.every(invalid => !url.startsWith(invalid))\r\n  })\r\n}\r\n\r\n// Inject after installed / available\r\nbrowser.runtime.onInstalled.addListener(async () => {\r\n  for (const { id } of await queryAllInjectableTabs()) {\r\n    if (id) {\r\n      const manifest = browser.runtime.getManifest()\r\n      for (const file of manifest.content_scripts![0].js!) {\r\n        browser.tabs.executeScript(id, {\r\n          file\r\n        , allFrames: true\r\n        , matchAboutBlank: true\r\n        , runAt: 'document_end' as browser.extensionTypes.RunAt\r\n        })\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nbrowser.contextMenus.onClicked.addListener(async (info, tab) => {\r\n  const text = await (handlers[info.menuItemId] as ContextMenusClickHandler)(info, tab)\r\n  if (text) {\r\n    await writeTextToClipboard(text)\r\n  }\r\n})\r\n\r\nbrowser.commands.onCommand.addListener(async command => {\r\n  const tabs = await browser.tabs.query({ currentWindow: true, active: true })\r\n  if (tabs.length) {\r\n    const text = await (handlers[command] as CommandComplicateHandler)({}, tabs[0])\r\n    if (text) {\r\n      await writeTextToClipboard(text)\r\n    }\r\n  }\r\n})\r\n\r\n;\r\n(async () => {\r\n  // Register menus\r\n  await browser.contextMenus.removeAll()\r\n  for (const [contexts, items] of menus.entries()) {\r\n    for (const item of items) {\r\n      if (!item.type && item.id) {\r\n        item.type = 'normal'\r\n        item.title = browser.i18n.getMessage(item.id)\r\n      }\r\n      item.contexts = contexts\r\n      browser.contextMenus.create(item as any)\r\n    }\r\n  }\r\n})()\r\n","import {\n  getSelectionHTML\n, getSelectionText\n, getActiveElementContent\n, getDocumentTitle\n} from '../content-script/api'\nimport {\n  convertUrlToVideoHTML\n, convertUrlToAudioHTML\n, convertUrlToLinkHTML\n, convertUrlToLinkMarkdown\n, convertUrlToLinkBBCode\n, convertUrlToLinkPlain\n, convertUrlToImageHTML\n, convertUrlToImageMarkdown\n, convertUrlToImageBBCode\n, convertUrlToImageDataURI\n, convertUrlToFormattedURL\n, convertHtmlToBeautifyHTML\n, convertHtmlToBBCode\n, convertHtmlToSafeHTML\n, convertHtmlToFormattedLinkHTML\n, convertHtmlToMarkdown\n, convertHtmlToOnlyATagHTML\n, convertHtmlToNoAttrHTML\n, convertHtmlToPlainText\n, convertMarkdownToBeautifyMarkdown\n, convertTextToRawString\n, convertTextToTrimmedText\n, convertTextToDecodeEntitiesText\n} from '../converters'\nimport {\n  TAB_URL_TO_PLAIN\n, TAB_URL_TO_MARKDOWN\n, TAB_URL_TO_HTML\n, TAB_URL_TO_BBCODE\n, FRAME_URL_TO_PLAIN\n, FRAME_URL_TO_MARKDOWN\n, FRAME_URL_TO_HTML\n, FRAME_URL_TO_BBCODE\n, LINK_TO_MARKDOWN\n, LINK_TO_HTML\n, LINK_TO_BBCODE\n, SELECTION_TO_MARKDOWN\n, SELECTION_TO_HTML\n, SELECTION_TO_HTML_ONLY_A_TAG\n, SELECTION_TO_HTML_NO_ATTR\n, SELECTION_TO_BBCODE\n, SELECTION_TO_PLAIN\n, SELECTION_TO_PLAIN_TRIMMED\n, SELECTION_TO_RAW_STRING\n, IMAGE_TO_MARKDOWN\n, IMAGE_TO_MARKDOWN_DATA_URI_JPEG\n, IMAGE_TO_MARKDOWN_DATA_URI_PNG\n, IMAGE_TO_MARKDOWN_DATA_URI_WEBP\n, IMAGE_TO_HTML\n, IMAGE_TO_HTML_DATA_URI_JPEG\n, IMAGE_TO_HTML_DATA_URI_PNG\n, IMAGE_TO_HTML_DATA_URI_WEBP\n, IMAGE_TO_BBCODE\n, IMAGE_TO_DATA_URI_RAW\n, IMAGE_TO_DATA_URI_JPEG\n, IMAGE_TO_DATA_URI_PNG\n, IMAGE_TO_DATA_URI_WEBP\n, AUDIO_TO_HTML\n, VIDEO_TO_HTML\n} from './symbols'\n\nfunction log<T>(v: T) {\n  console.log(v)\n  return v\n}\n\nexport type ContextMenusClickHandler = (info: browser.contextMenus.OnClickData, tab?: browser.tabs.Tab) =>\n  string | void | Promise<string | void>\n\nexport type CommandComplicateHandler = (info: { [index: string]: any }, tab?: browser.tabs.Tab) =>\n  string | void | Promise<string | void>\n\ninterface UniversalHandlers {\n  [menuItemId: string]: ContextMenusClickHandler | CommandComplicateHandler\n}\n\nexport default {\n  [TAB_URL_TO_PLAIN]: ((info, tab) => {\n    if (tab && tab.url) {\n      return convertUrlToLinkPlain(tab.url, tab.title)\n    }\n  }) as CommandComplicateHandler\n, [TAB_URL_TO_MARKDOWN]: ((info, tab) => {\n    if (tab && tab.url) {\n      return convertUrlToLinkMarkdown(tab.url, tab.title)\n    }\n  }) as CommandComplicateHandler\n, [TAB_URL_TO_HTML]: ((info, tab) => {\n    if (tab && tab.url) {\n      return convertUrlToLinkHTML(tab.url, tab.title)\n    }\n  }) as CommandComplicateHandler\n, [TAB_URL_TO_BBCODE]: ((info, tab) => {\n    if (tab && tab.url) {\n      return convertUrlToLinkBBCode(tab.url, tab.title)\n    }\n  }) as CommandComplicateHandler\n, [FRAME_URL_TO_PLAIN]: (async (info, tab) => {\n    if (info.frameUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.frameUrl, tab.url)\n        const title = await getDocumentTitle(tab.id, info.frameId)\n        return convertUrlToLinkPlain(url, title)\n      } else {\n        return convertUrlToLinkPlain(info.frameUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [FRAME_URL_TO_MARKDOWN]: (async (info, tab) => {\n    if (info.frameUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.frameUrl, tab.url)\n        const title = await getDocumentTitle(tab.id, info.frameId)\n        return convertUrlToLinkMarkdown(url, title)\n      } else {\n        return convertUrlToLinkMarkdown(info.frameUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [FRAME_URL_TO_HTML]: (async (info, tab) => {\n    if (info.frameUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.frameUrl, tab.url)\n        const title = await getDocumentTitle(tab.id, info.frameId)\n        return convertUrlToLinkHTML(url, title)\n      } else {\n        return convertUrlToLinkHTML(info.frameUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [FRAME_URL_TO_BBCODE]: (async (info, tab) => {\n    if (info.frameUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.frameUrl, tab.url)\n        const title = await getDocumentTitle(tab.id, info.frameId)\n        return convertUrlToLinkBBCode(url, title)\n      } else {\n        return convertUrlToLinkBBCode(info.frameUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [LINK_TO_MARKDOWN]: (async (info, tab) => {\n    if (info.linkUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.linkUrl, info.frameUrl || tab.url)\n        const html = await getActiveElementContent(tab.id, info.frameId)\n        const title =\n        convertMarkdownToBeautifyMarkdown(\n          convertHtmlToMarkdown(\n            convertHtmlToBeautifyHTML(\n              convertHtmlToSafeHTML(html)\n            )\n          )\n        )\n        return convertUrlToLinkMarkdown(url, title || info.linkText)\n      } else {\n        return convertUrlToLinkMarkdown(info.linkUrl, info.linkText)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [LINK_TO_HTML]: (async (info, tab) => {\n    if (info.linkUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.linkUrl, info.frameUrl || tab.url)\n        const html = await getActiveElementContent(tab.id, info.frameId)\n        const title =\n        convertHtmlToBeautifyHTML(\n          convertHtmlToSafeHTML(html)\n        )\n        return convertUrlToLinkHTML(url, title || info.linkText)\n      } else {\n        return convertUrlToLinkHTML(info.linkUrl, info.linkText)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [LINK_TO_BBCODE]: (async (info, tab) => {\n    if (info.linkUrl) {\n      if (tab && tab.id && tab.url) {\n        const url = convertUrlToFormattedURL(info.linkUrl, info.frameUrl || tab.url)\n        const html = await getActiveElementContent(tab.id, info.frameId)\n        const title =\n        convertHtmlToBBCode(\n          convertHtmlToBeautifyHTML(\n            convertHtmlToSafeHTML(\n              html\n            )\n          )\n        )\n        return convertUrlToLinkBBCode(url, title || info.linkText)\n      } else {\n        return convertUrlToLinkBBCode(info.linkUrl, info.linkText)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_MARKDOWN]: ((info, tab) => {\n    if (info.mediaType === 'image' && info.srcUrl) {\n      if (tab && tab.url) {\n        const url = convertUrlToFormattedURL(info.srcUrl, info.frameUrl || tab.url)\n        return convertUrlToImageMarkdown(url)\n      } else {\n        return convertUrlToImageMarkdown(info.srcUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_MARKDOWN_DATA_URI_JPEG]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return convertUrlToImageMarkdown(\n        await convertUrlToImageDataURI(srcUrl, 'jpeg')\n      )\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_MARKDOWN_DATA_URI_PNG]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return convertUrlToImageMarkdown(\n        await convertUrlToImageDataURI(srcUrl, 'png')\n      )\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_MARKDOWN_DATA_URI_WEBP]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return convertUrlToImageMarkdown(\n        await convertUrlToImageDataURI(srcUrl, 'webp')\n      )\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_HTML]: ((info, tab) => {\n    if (info.mediaType === 'image' && info.srcUrl) {\n      if (tab && tab.url) {\n        const url = convertUrlToFormattedURL(info.srcUrl, info.frameUrl || tab.url)\n        return convertUrlToImageHTML(url)\n      } else {\n        return convertUrlToImageHTML(info.srcUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_HTML_DATA_URI_JPEG]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return convertUrlToImageHTML(\n        await convertUrlToImageDataURI(srcUrl, 'jpeg')\n      )\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_HTML_DATA_URI_PNG]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return convertUrlToImageHTML(\n        await convertUrlToImageDataURI(srcUrl, 'png')\n      )\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_HTML_DATA_URI_WEBP]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return convertUrlToImageHTML(\n        await convertUrlToImageDataURI(srcUrl, 'webp')\n      )\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_BBCODE]: (async (info, tab) => {\n    if (info.mediaType === 'image' && info.srcUrl) {\n      if (tab && tab.url) {\n        const url = convertUrlToFormattedURL(info.srcUrl, info.frameUrl || tab.url)\n        return convertUrlToImageBBCode(url)\n      } else {\n        return convertUrlToImageBBCode(info.srcUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_DATA_URI_RAW]: (async ({ mediaType, srcUrl }, tab) => {\n    if (mediaType === 'image' && srcUrl) {\n      return await convertUrlToImageDataURI(srcUrl)\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_DATA_URI_JPEG]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return await convertUrlToImageDataURI(srcUrl, 'jpeg')\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_DATA_URI_PNG]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return await convertUrlToImageDataURI(srcUrl, 'png')\n    }\n  }) as ContextMenusClickHandler\n, [IMAGE_TO_DATA_URI_WEBP]: (async ({ mediaType, srcUrl }) => {\n    if (mediaType === 'image' && srcUrl) {\n      return await convertUrlToImageDataURI(srcUrl, 'webp')\n    }\n  }) as ContextMenusClickHandler\n, [AUDIO_TO_HTML]: ((info, tab) => {\n    if (info.mediaType === 'audio' && info.srcUrl) {\n      if (tab && tab.url) {\n        const url = convertUrlToFormattedURL(info.srcUrl, info.frameUrl || tab.url)\n        return convertUrlToAudioHTML(url)\n      } else {\n        return convertUrlToAudioHTML(info.srcUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [VIDEO_TO_HTML]: ((info, tab) => {\n    if (info.mediaType === 'video' && info.srcUrl) {\n      if (tab && tab.url) {\n        const url = convertUrlToFormattedURL(info.srcUrl, info.frameUrl || tab.url)\n        return convertUrlToVideoHTML(url)\n      } else {\n        return convertUrlToVideoHTML(info.srcUrl)\n      }\n    }\n  }) as ContextMenusClickHandler\n, [SELECTION_TO_MARKDOWN]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const html = await getSelectionHTML(tab.id, info.frameId)\n      const baseUrl = info.frameUrl || info.pageUrl || tab.url\n      return (\n        convertMarkdownToBeautifyMarkdown(\n          convertHtmlToMarkdown(\n            convertHtmlToBeautifyHTML(\n              convertHtmlToFormattedLinkHTML(\n                convertHtmlToSafeHTML(html)\n              , baseUrl\n              )\n            )\n          )\n        )\n      )\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_HTML]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const html = await getSelectionHTML(tab.id, info.frameId)\n      const baseUrl = info.frameUrl || info.pageUrl || tab.url\n      return (\n        convertHtmlToBeautifyHTML(\n          convertHtmlToFormattedLinkHTML(\n            convertHtmlToSafeHTML(html)\n          , baseUrl\n          )\n        )\n      )\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_HTML_ONLY_A_TAG]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const html = await getSelectionHTML(tab.id, info.frameId)\n      const baseUrl = info.frameUrl || info.pageUrl || tab.url\n      return (\n        convertHtmlToBeautifyHTML(\n          convertHtmlToOnlyATagHTML(\n            convertHtmlToFormattedLinkHTML(\n              convertHtmlToSafeHTML(html)\n            , baseUrl\n            )\n          )\n        )\n      )\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_HTML_NO_ATTR]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const html = await getSelectionHTML(tab.id, info.frameId)\n      return (\n        convertHtmlToBeautifyHTML(\n          convertHtmlToNoAttrHTML(\n            convertHtmlToSafeHTML(html)\n          )\n        )\n      )\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_BBCODE]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const html = await getSelectionHTML(tab.id, info.frameId)\n      const baseUrl = info.frameUrl || info.pageUrl || tab.url\n      return (\n        convertHtmlToBBCode(\n          convertHtmlToBeautifyHTML(\n            convertHtmlToFormattedLinkHTML(\n              convertHtmlToSafeHTML(html)\n            , baseUrl\n            )\n          )\n        )\n      )\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_PLAIN]: (async (info, tab) => {\n    if (tab && tab.id) {\n      return await getSelectionText(tab.id, info.frameId)\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_PLAIN_TRIMMED]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const text = await getSelectionText(tab.id, info.frameId)\n      return convertTextToTrimmedText(text)\n    }\n  }) as CommandComplicateHandler\n, [SELECTION_TO_RAW_STRING]: (async (info, tab) => {\n    if (tab && tab.id) {\n      const text = await getSelectionText(tab.id, info.frameId)\n      return convertTextToRawString(text)\n    }\n  }) as CommandComplicateHandler\n} as UniversalHandlers\n","export async function getSelectionHTML(tabId: number, frameId: number = 0): Promise<string> {\n  return await browser.tabs.sendMessage(tabId, { type: 'selection-html' }, { frameId })\n}\n\nexport async function getSelectionText(tabId: number, frameId: number = 0): Promise<string> {\n  return await browser.tabs.sendMessage(tabId, { type: 'selection-text' }, { frameId })\n}\n\nexport async function getActiveElementContent(tabId: number, frameId: number = 0): Promise<string> {\n  return await browser.tabs.sendMessage(tabId, { type: 'active-element-content' }, { frameId })\n}\n\nexport async function getDocumentTitle(tabId: number, frameId: number = 0): Promise<string> {\n  return await browser.tabs.sendMessage(tabId, { type: 'document-title' }, { frameId })\n}\n","export * from './url'\nexport * from './html'\nexport * from './text'\nexport * from './markdown'\n","export * from './video'\nexport * from './audio'\nexport * from './link'\nexport * from './image'\nexport * from './formatted'\n","export * from './html'\n","export function convertUrlToVideoHTML(url: string): string {\n  return `<video controls src=\"${ url }\"></video>`\n}\n\nexport default convertUrlToVideoHTML\n","export * from './html'\n","export function convertUrlToAudioHTML(url: string): string {\n  return `<audio controls src=\"${ url }\"></audio>`\n}\n\nexport default convertUrlToAudioHTML\n","export * from './html'\nexport * from './markdown'\nexport * from './bbcode'\nexport * from './plain'\n","export function convertUrlToLinkHTML(url: string, text: string = url): string {\n  return `<a href=\"${ url }\">${ text }</a>`\n}\n\nexport default convertUrlToLinkHTML\n","export function convertUrlToLinkMarkdown(url: string, text: string = url): string {\n  return `[${ text }](${ url })`\n}\n\nexport default convertUrlToLinkMarkdown\n","export function convertUrlToLinkBBCode(url: string, text: string = url): string {\n  return `[url=${ url }]${ text }[/url]`\n}\n\nexport default convertUrlToLinkBBCode\n","export function convertUrlToLinkPlain(url: string, text?: string): string {\n  if (text) {\n    return `${ text }\\n${ url }`\n  }\n  return `${ url }`\n}\n\nexport default convertUrlToLinkPlain\n","export * from './html'\nexport * from './markdown'\nexport * from './bbcode'\nexport * from './data-uri'\n","export function convertUrlToImageHTML(url: string): string {\n  return `<img src=\"${ url }\" />`\n}\n\nexport default convertUrlToImageHTML\n","export function convertUrlToImageMarkdown(url: string): string {\n  return `![](${ url })`\n}\n\nexport default convertUrlToImageMarkdown\n","export function convertUrlToImageBBCode(url: string): string {\n  return `[img]${ url }[/img]`\n}\n\nexport default convertUrlToImageBBCode\n","type ImageFormat = 'jpeg' | 'webp' | 'png'\n\nexport function convertUrlToImageDataURI(url: string, format?: ImageFormat): Promise<string> {\n  if (format) {\n    return new Promise<string>((resolve, reject) => {\n      const img = new Image()\n      img.onload = () => {\n        const canvas = document.createElement('canvas')\n        canvas.width = img.naturalWidth\n        canvas.height = img.naturalHeight\n        canvas.getContext('2d')!.drawImage(img, 0, 0)\n        resolve(canvas.toDataURL(`image/${ format }`))\n      }\n      img.onerror = reject\n      img.src = url\n    })\n  } else {\n    return new Promise<string>(async (resolve, reject) => {\n      const blob = await fetch(url).then(res => res.blob())\n      const reader = new FileReader()\n      reader.onloadend = () => resolve(reader.result as string)\n      reader.onerror = reject\n      reader.readAsDataURL(blob)\n    })\n  }\n}\n\nexport default convertUrlToImageDataURI\n","import { loadConfigure } from '../../../configure'\nimport { convertUrlToAbsoluteURL } from './absolute'\nimport { convertUrlToRelativeURL } from './relative'\nimport { convertUrlToRootRelativeURL } from './root-relative'\n\nexport function convertUrlToFormattedURL(url: string, baseUrl: string): string {\n  const { urlFormat } = loadConfigure()\n  switch (urlFormat) {\n    case 'absolute':\n      return convertUrlToAbsoluteURL(url, baseUrl)\n    case 'relative':\n      return convertUrlToRelativeURL(url, baseUrl)\n    case 'root-relative':\n      return convertUrlToRootRelativeURL(url, baseUrl)\n    case 'original':\n      return url\n  }\n}\n\nexport * from './absolute'\nexport * from './relative'\nexport * from './root-relative'\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","export * from './html'\nexport * from './markdown'\nexport * from './bbcode'\nexport * from './text'\n","export * from './beautify'\nexport * from './safe'\nexport * from './formatted-link'\nexport * from './no-attr'\nexport * from './only-a-tag'\n","import beautify = require('js-beautify')\n\nexport function convertHtmlToBeautifyHTML(html: string): string {\n  return beautify.html(html)\n}\n\nexport default convertHtmlToBeautifyHTML\n","/*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n*/\n\n/**\nThe following batches are equivalent:\n\nvar beautify_js = require('js-beautify');\nvar beautify_js = require('js-beautify').js;\nvar beautify_js = require('js-beautify').js_beautify;\n\nvar beautify_css = require('js-beautify').css;\nvar beautify_css = require('js-beautify').css_beautify;\n\nvar beautify_html = require('js-beautify').html;\nvar beautify_html = require('js-beautify').html_beautify;\n\nAll methods returned accept two arguments, the source string and an options object.\n**/\n\nfunction get_beautify(js_beautify, css_beautify, html_beautify) {\n    // the default is js\n    var beautify = function(src, config) {\n        return js_beautify.js_beautify(src, config);\n    };\n\n    // short aliases\n    beautify.js = js_beautify.js_beautify;\n    beautify.css = css_beautify.css_beautify;\n    beautify.html = html_beautify.html_beautify;\n\n    // legacy aliases\n    beautify.js_beautify = js_beautify.js_beautify;\n    beautify.css_beautify = css_beautify.css_beautify;\n    beautify.html_beautify = html_beautify.html_beautify;\n\n    return beautify;\n}\n\nif (typeof define === \"function\" && define.amd) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    define([\n        \"./lib/beautify\",\n        \"./lib/beautify-css\",\n        \"./lib/beautify-html\"\n    ], function(js_beautify, css_beautify, html_beautify) {\n        return get_beautify(js_beautify, css_beautify, html_beautify);\n    });\n} else {\n    (function(mod) {\n        var js_beautify = require('./lib/beautify');\n        var css_beautify = require('./lib/beautify-css');\n        var html_beautify = require('./lib/beautify-html');\n\n        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);\n\n    })(module);\n}","/*jshint curly:false, eqeqeq:true, laxbreak:true, noempty:false */\n/* AUTO-GENERATED. DO NOT MODIFY. */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n    http://jsbeautifier.org/\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_inner_html (default false)  — indent <head> and <body> sections,\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    content_unformatted (defaults to pre tag) - list of tags, whose content shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n    preserve_newlines (default true) - whether existing line breaks before elements should be preserved\n                                        Only works before elements, not inside tags or for text.\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk\n    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}\n    end_with_newline (false)          - end with a newline\n    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_inner_html': false,\n      'indent_size': 2,\n      'indent_char': ' ',\n      'wrap_line_length': 78,\n      'brace_style': 'expand',\n      'preserve_newlines': true,\n      'max_preserve_newlines': 5,\n      'indent_handlebars': false,\n      'extra_liners': ['/html']\n    });\n*/\n\n(function() {\nvar legacy_beautify_html =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nvar mergeOpts = __webpack_require__(2).mergeOpts;\nvar acorn = __webpack_require__(1);\n\n\nvar lineBreak = acorn.lineBreak;\nvar allLineBreaks = acorn.allLineBreaks;\n\n// function trim(s) {\n//     return s.replace(/^\\s+|\\s+$/g, '');\n// }\n\nfunction ltrim(s) {\n    return s.replace(/^\\s+/g, '');\n}\n\nfunction rtrim(s) {\n    return s.replace(/\\s+$/g, '');\n}\n\nfunction Beautifier(html_source, options, js_beautify, css_beautify) {\n    //Wrapper function to invoke all the necessary constructors and deal with the output.\n    html_source = html_source || '';\n\n    var multi_parser,\n        indent_inner_html,\n        indent_body_inner_html,\n        indent_head_inner_html,\n        indent_size,\n        indent_character,\n        wrap_line_length,\n        brace_style,\n        unformatted,\n        content_unformatted,\n        preserve_newlines,\n        max_preserve_newlines,\n        indent_handlebars,\n        wrap_attributes,\n        wrap_attributes_indent_size,\n        is_wrap_attributes_force,\n        is_wrap_attributes_force_expand_multiline,\n        is_wrap_attributes_force_aligned,\n        end_with_newline,\n        extra_liners,\n        eol;\n\n    options = options || {};\n\n    // Allow the setting of language/file-type specific options\n    // with inheritance of overall settings\n    options = mergeOpts(options, 'html');\n\n    // backwards compatibility to 1.3.4\n    if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&\n        (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {\n        options.wrap_line_length = options.max_char;\n    }\n\n    indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;\n    indent_body_inner_html = (options.indent_body_inner_html === undefined) ? true : options.indent_body_inner_html;\n    indent_head_inner_html = (options.indent_head_inner_html === undefined) ? true : options.indent_head_inner_html;\n    indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);\n    indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;\n    brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;\n    wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);\n    unformatted = options.unformatted || [\n        // https://www.w3.org/TR/html5/dom.html#phrasing-content\n        'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',\n        'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\n        'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',\n        'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',\n        'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',\n        'video', 'wbr', 'text',\n        // prexisting - not sure of full effect of removing, leaving in\n        'acronym', 'address', 'big', 'dt', 'ins', 'strike', 'tt',\n    ];\n    content_unformatted = options.content_unformatted || [\n        'pre',\n    ];\n    preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n    max_preserve_newlines = preserve_newlines ?\n        (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :\n        0;\n    indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;\n    wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;\n    wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);\n    is_wrap_attributes_force = wrap_attributes.substr(0, 'force'.length) === 'force';\n    is_wrap_attributes_force_expand_multiline = (wrap_attributes === 'force-expand-multiline');\n    is_wrap_attributes_force_aligned = (wrap_attributes === 'force-aligned');\n    end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n    extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?\n        options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?\n        options.extra_liners.split(',') : 'head,body,/html'.split(',');\n    eol = options.eol ? options.eol : 'auto';\n\n    if (options.indent_with_tabs) {\n        indent_character = '\\t';\n        indent_size = 1;\n    }\n\n    if (eol === 'auto') {\n        eol = '\\n';\n        if (html_source && lineBreak.test(html_source || '')) {\n            eol = html_source.match(lineBreak)[0];\n        }\n    }\n\n    eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n    // HACK: newline parsing inconsistent. This brute force normalizes the input.\n    html_source = html_source.replace(allLineBreaks, '\\n');\n\n    function Parser() {\n\n        this.pos = 0; //Parser position\n        this.token = '';\n        this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n        this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n            parent: 'parent1',\n            parentcount: 1,\n            parent1: ''\n        };\n        this.tag_type = '';\n        this.token_text = this.last_token = this.last_text = this.token_type = '';\n        this.newlines = 0;\n        this.indent_content = indent_inner_html;\n        this.indent_body_inner_html = indent_body_inner_html;\n        this.indent_head_inner_html = indent_head_inner_html;\n\n        this.Utils = { //Uilities made available to the various functions\n            whitespace: \"\\n\\r\\t \".split(''),\n\n            single_token: options.void_elements || [\n                // HTLM void elements - aka self-closing tags - aka singletons\n                // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n                'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n                'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',\n                // NOTE: Optional tags - are not understood.\n                // https://www.w3.org/TR/html5/syntax.html#optional-tags\n                // The rules for optional tags are too complex for a simple list\n                // Also, the content of these tags should still be indented in many cases.\n                // 'li' is a good exmple.\n\n                // Doctype and xml elements\n                '!doctype', '?xml',\n                // ?php tag\n                '?php',\n                // other tags that were in this list, keeping just in case\n                'basefont', 'isindex'\n            ],\n            extra_liners: extra_liners, //for tags that need a line of whitespace before them\n            in_array: function(what, arr) {\n                for (var i = 0; i < arr.length; i++) {\n                    if (what === arr[i]) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n\n        // Return true if the given text is composed entirely of whitespace.\n        this.is_whitespace = function(text) {\n            for (var n = 0; n < text.length; n++) {\n                if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        this.traverse_whitespace = function() {\n            var input_char = '';\n\n            input_char = this.input.charAt(this.pos);\n            if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                this.newlines = 0;\n                while (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                    if (preserve_newlines && input_char === '\\n' && this.newlines <= max_preserve_newlines) {\n                        this.newlines += 1;\n                    }\n\n                    this.pos++;\n                    input_char = this.input.charAt(this.pos);\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Append a space to the given content (string array) or, if we are\n        // at the wrap_line_length, append a newline/indentation.\n        // return true if a newline was added, false if a space was added\n        this.space_or_wrap = function(content) {\n            if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached\n                this.print_newline(false, content);\n                this.print_indentation(content);\n                return true;\n            } else {\n                this.line_char_count++;\n                content.push(' ');\n                return false;\n            }\n        };\n\n        this.get_content = function() { //function to capture regular content between tags\n            var input_char = '',\n                content = [],\n                handlebarsStarted = 0;\n\n            while (this.input.charAt(this.pos) !== '<' || handlebarsStarted === 2) {\n                if (this.pos >= this.input.length) {\n                    return content.length ? content.join('') : ['', 'TK_EOF'];\n                }\n\n                if (handlebarsStarted < 2 && this.traverse_whitespace()) {\n                    this.space_or_wrap(content);\n                    continue;\n                }\n\n                input_char = this.input.charAt(this.pos);\n\n                if (indent_handlebars) {\n                    if (input_char === '{') {\n                        handlebarsStarted += 1;\n                    } else if (handlebarsStarted < 2) {\n                        handlebarsStarted = 0;\n                    }\n\n                    if (input_char === '}' && handlebarsStarted > 0) {\n                        if (handlebarsStarted-- === 0) {\n                            break;\n                        }\n                    }\n                    // Handlebars parsing is complicated.\n                    // {{#foo}} and {{/foo}} are formatted tags.\n                    // {{something}} should get treated as content, except:\n                    // {{else}} specifically behaves like {{#if}} and {{/if}}\n                    var peek3 = this.input.substr(this.pos, 3);\n                    if (peek3 === '{{#' || peek3 === '{{/') {\n                        // These are tags and not content.\n                        break;\n                    } else if (peek3 === '{{!') {\n                        return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];\n                    } else if (this.input.substr(this.pos, 2) === '{{') {\n                        if (this.get_tag(true) === '{{else}}') {\n                            break;\n                        }\n                    }\n                }\n\n                this.pos++;\n                this.line_char_count++;\n                content.push(input_char); //letter at-a-time (or string) inserted to an array\n            }\n            return content.length ? content.join('') : '';\n        };\n\n        this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify\n            if (this.pos === this.input.length) {\n                return ['', 'TK_EOF'];\n            }\n            var content = '';\n            var reg_match = new RegExp('</' + name + '\\\\s*>', 'igm');\n            reg_match.lastIndex = this.pos;\n            var reg_array = reg_match.exec(this.input);\n            var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script\n            if (this.pos < end_script) { //get everything in between the script tags\n                content = this.input.substring(this.pos, end_script);\n                this.pos = end_script;\n            }\n            return content;\n        };\n\n        this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object\n            if (this.tags[tag + 'count']) { //check for the existence of this tag type\n                this.tags[tag + 'count']++;\n                this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n            } else { //otherwise initialize this tag type\n                this.tags[tag + 'count'] = 1;\n                this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n            }\n            this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n            this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n        };\n\n        this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer\n            if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n                var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n                while (temp_parent) { //till we reach '' (the initial value);\n                    if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n                        break;\n                    }\n                    temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n                }\n                if (temp_parent) { //if we caught something\n                    this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n                    this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n                }\n                delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n                delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n                if (this.tags[tag + 'count'] === 1) {\n                    delete this.tags[tag + 'count'];\n                } else {\n                    this.tags[tag + 'count']--;\n                }\n            }\n        };\n\n        this.indent_to_tag = function(tag) {\n            // Match the indentation level to the last use of this tag, but don't remove it.\n            if (!this.tags[tag + 'count']) {\n                return;\n            }\n            var temp_parent = this.tags.parent;\n            while (temp_parent) {\n                if (tag + this.tags[tag + 'count'] === temp_parent) {\n                    break;\n                }\n                temp_parent = this.tags[temp_parent + 'parent'];\n            }\n            if (temp_parent) {\n                this.indent_level = this.tags[tag + this.tags[tag + 'count']];\n            }\n        };\n\n        this.get_tag = function(peek) { //function to get a full tag and parse its type\n            var input_char = '',\n                content = [],\n                comment = '',\n                space = false,\n                first_attr = true,\n                has_wrapped_attrs = false,\n                tag_start, tag_end,\n                tag_start_char,\n                orig_pos = this.pos,\n                orig_line_char_count = this.line_char_count,\n                is_tag_closed = false,\n                tail;\n\n            peek = peek !== undefined ? peek : false;\n\n            do {\n                if (this.pos >= this.input.length) {\n                    if (peek) {\n                        this.pos = orig_pos;\n                        this.line_char_count = orig_line_char_count;\n                    }\n                    return content.length ? content.join('') : ['', 'TK_EOF'];\n                }\n\n                input_char = this.input.charAt(this.pos);\n                this.pos++;\n\n                if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n                    space = true;\n                    continue;\n                }\n\n                if (input_char === \"'\" || input_char === '\"') {\n                    input_char += this.get_unformatted(input_char);\n                    space = true;\n                }\n\n                if (input_char === '=') { //no space before =\n                    space = false;\n                }\n                tail = this.input.substr(this.pos - 1);\n                if (is_wrap_attributes_force_expand_multiline && has_wrapped_attrs && !is_tag_closed && (input_char === '>' || input_char === '/')) {\n                    if (tail.match(/^\\/?\\s*>/)) {\n                        space = false;\n                        is_tag_closed = true;\n                        this.print_newline(false, content);\n                        this.print_indentation(content);\n                    }\n                }\n                if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {\n                    //no space after = or before >\n                    var wrapped = this.space_or_wrap(content);\n                    var indentAttrs = wrapped && input_char !== '/' && !is_wrap_attributes_force;\n                    space = false;\n\n                    if (is_wrap_attributes_force && input_char !== '/') {\n                        var force_first_attr_wrap = false;\n                        if (is_wrap_attributes_force_expand_multiline && first_attr) {\n                            var is_only_attribute = tail.match(/^\\S*(=\"([^\"]|\\\\\")*\")?\\s*\\/?\\s*>/) !== null;\n                            force_first_attr_wrap = !is_only_attribute;\n                        }\n                        if (!first_attr || force_first_attr_wrap) {\n                            this.print_newline(false, content);\n                            this.print_indentation(content);\n                            indentAttrs = true;\n                        }\n                    }\n                    if (indentAttrs) {\n                        has_wrapped_attrs = true;\n\n                        //indent attributes an auto, forced, or forced-align line-wrap\n                        var alignment_size = wrap_attributes_indent_size;\n                        if (is_wrap_attributes_force_aligned) {\n                            alignment_size = content.indexOf(' ') + 1;\n                        }\n\n                        for (var count = 0; count < alignment_size; count++) {\n                            // only ever further indent with spaces since we're trying to align characters\n                            content.push(' ');\n                        }\n                    }\n                    if (first_attr) {\n                        for (var i = 0; i < content.length; i++) {\n                            if (content[i] === ' ') {\n                                first_attr = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (indent_handlebars && tag_start_char === '<') {\n                    // When inside an angle-bracket tag, put spaces around\n                    // handlebars not inside of strings.\n                    if ((input_char + this.input.charAt(this.pos)) === '{{') {\n                        input_char += this.get_unformatted('}}');\n                        if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {\n                            input_char = ' ' + input_char;\n                        }\n                        space = true;\n                    }\n                }\n\n                if (input_char === '<' && !tag_start_char) {\n                    tag_start = this.pos - 1;\n                    tag_start_char = '<';\n                }\n\n                if (indent_handlebars && !tag_start_char) {\n                    if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {\n                        if (input_char === '#' || input_char === '/' || input_char === '!') {\n                            tag_start = this.pos - 3;\n                        } else {\n                            tag_start = this.pos - 2;\n                        }\n                        tag_start_char = '{';\n                    }\n                }\n\n                this.line_char_count++;\n                content.push(input_char); //inserts character at-a-time (or string)\n\n                if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special\n                    // We treat all comments as literals, even more than preformatted tags\n                    // we just look for the appropriate close tag\n                    content = [this.get_comment(tag_start)];\n                    break;\n                }\n\n                if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special\n                    // We treat all comments as literals, even more than preformatted tags\n                    // we just look for the appropriate close tag\n                    content = [this.get_comment(tag_start)];\n                    break;\n                }\n\n                if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {\n                    break;\n                }\n            } while (input_char !== '>');\n\n            var tag_complete = content.join('');\n            var tag_index;\n            var tag_offset;\n\n            // must check for space first otherwise the tag could have the first attribute included, and\n            // then not un-indent correctly\n            if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends\n                tag_index = tag_complete.indexOf(' ');\n            } else if (tag_complete.indexOf('\\n') !== -1) { //if there's a line break, thats where the tag name ends\n                tag_index = tag_complete.indexOf('\\n');\n            } else if (tag_complete.charAt(0) === '{') {\n                tag_index = tag_complete.indexOf('}');\n            } else { //otherwise go with the tag ending\n                tag_index = tag_complete.indexOf('>');\n            }\n            if (tag_complete.charAt(0) === '<' || !indent_handlebars) {\n                tag_offset = 1;\n            } else {\n                tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;\n            }\n            var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();\n            if (tag_complete.charAt(tag_complete.length - 2) === '/' ||\n                this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n                if (!peek) {\n                    this.tag_type = 'SINGLE';\n                }\n            } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {\n                if (!peek) {\n                    this.indent_to_tag('if');\n                    this.tag_type = 'HANDLEBARS_ELSE';\n                    this.indent_content = true;\n                    this.traverse_whitespace();\n                }\n            } else if (this.is_unformatted(tag_check, unformatted) ||\n                this.is_unformatted(tag_check, content_unformatted)) {\n                // do not reformat the \"unformatted\" or \"content_unformatted\" tags\n                comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function\n                content.push(comment);\n                tag_end = this.pos - 1;\n                this.tag_type = 'SINGLE';\n            } else if (tag_check === 'script' &&\n                (tag_complete.search('type') === -1 ||\n                    (tag_complete.search('type') > -1 &&\n                        tag_complete.search(/\\b(text|application|dojo)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json|method|aspect)/) > -1))) {\n                if (!peek) {\n                    this.record_tag(tag_check);\n                    this.tag_type = 'SCRIPT';\n                }\n            } else if (tag_check === 'style' &&\n                (tag_complete.search('type') === -1 ||\n                    (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {\n                if (!peek) {\n                    this.record_tag(tag_check);\n                    this.tag_type = 'STYLE';\n                }\n            } else if (tag_check.charAt(0) === '!') { //peek for <! comment\n                // for comments content is already correct.\n                if (!peek) {\n                    this.tag_type = 'SINGLE';\n                    this.traverse_whitespace();\n                }\n            } else if (!peek) {\n                if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n                    this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n                    this.tag_type = 'END';\n                } else { //otherwise it's a start-tag\n                    this.record_tag(tag_check); //push it on the tag stack\n                    if (tag_check.toLowerCase() !== 'html') {\n                        this.indent_content = true;\n                    }\n                    this.tag_type = 'START';\n                }\n\n                // Allow preserving of newlines after a start or end tag\n                if (this.traverse_whitespace()) {\n                    this.space_or_wrap(content);\n                }\n\n                if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n                    this.print_newline(false, this.output);\n                    if (this.output.length && this.output[this.output.length - 2] !== '\\n') {\n                        this.print_newline(true, this.output);\n                    }\n                }\n            }\n\n            if (peek) {\n                this.pos = orig_pos;\n                this.line_char_count = orig_line_char_count;\n            }\n\n            return content.join(''); //returns fully formatted tag\n        };\n\n        this.get_comment = function(start_pos) { //function to return comment content in its entirety\n            // this is will have very poor perf, but will work for now.\n            var comment = '',\n                delimiter = '>',\n                matched = false;\n\n            this.pos = start_pos;\n            var input_char = this.input.charAt(this.pos);\n            this.pos++;\n\n            while (this.pos <= this.input.length) {\n                comment += input_char;\n\n                // only need to check for the delimiter if the last chars match\n                if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&\n                    comment.indexOf(delimiter) !== -1) {\n                    break;\n                }\n\n                // only need to search for custom delimiter for the first few characters\n                if (!matched && comment.length < 10) {\n                    if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment\n                        delimiter = '<![endif]>';\n                        matched = true;\n                    } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...\n                        delimiter = ']]>';\n                        matched = true;\n                    } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...\n                        delimiter = ']>';\n                        matched = true;\n                    } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...\n                        delimiter = '-->';\n                        matched = true;\n                    } else if (comment.indexOf('{{!--') === 0) { // {{!-- handlebars comment\n                        delimiter = '--}}';\n                        matched = true;\n                    } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment\n                        if (comment.length === 5 && comment.indexOf('{{!--') === -1) {\n                            delimiter = '}}';\n                            matched = true;\n                        }\n                    } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment\n                        delimiter = '?>';\n                        matched = true;\n                    } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment\n                        delimiter = '%>';\n                        matched = true;\n                    }\n                }\n\n                input_char = this.input.charAt(this.pos);\n                this.pos++;\n            }\n\n            return comment;\n        };\n\n        function tokenMatcher(delimiter) {\n            var token = '';\n\n            var add = function(str) {\n                var newToken = token + str.toLowerCase();\n                token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);\n            };\n\n            var doesNotMatch = function() {\n                return token.indexOf(delimiter) === -1;\n            };\n\n            return {\n                add: add,\n                doesNotMatch: doesNotMatch\n            };\n        }\n\n        this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety\n            if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {\n                return '';\n            }\n            var input_char = '';\n            var content = '';\n            var space = true;\n\n            var delimiterMatcher = tokenMatcher(delimiter);\n\n            do {\n\n                if (this.pos >= this.input.length) {\n                    return content;\n                }\n\n                input_char = this.input.charAt(this.pos);\n                this.pos++;\n\n                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                    if (!space) {\n                        this.line_char_count--;\n                        continue;\n                    }\n                    if (input_char === '\\n' || input_char === '\\r') {\n                        content += '\\n';\n                        /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n            for (var i=0; i<this.indent_level; i++) {\n              content += this.indent_string;\n            }\n            space = false; //...and make sure other indentation is erased\n            */\n                        this.line_char_count = 0;\n                        continue;\n                    }\n                }\n                content += input_char;\n                delimiterMatcher.add(input_char);\n                this.line_char_count++;\n                space = true;\n\n                if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {\n                    // Handlebars expressions in strings should also be unformatted.\n                    content += this.get_unformatted('}}');\n                    // Don't consider when stopping for delimiters.\n                }\n            } while (delimiterMatcher.doesNotMatch());\n\n            return content;\n        };\n\n        this.get_token = function() { //initial handler for token-retrieval\n            var token;\n\n            if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n                var type = this.last_token.substr(7);\n                token = this.get_contents_to(type);\n                if (typeof token !== 'string') {\n                    return token;\n                }\n                return [token, 'TK_' + type];\n            }\n            if (this.current_mode === 'CONTENT') {\n                token = this.get_content();\n                if (typeof token !== 'string') {\n                    return token;\n                } else {\n                    return [token, 'TK_CONTENT'];\n                }\n            }\n\n            if (this.current_mode === 'TAG') {\n                token = this.get_tag();\n                if (typeof token !== 'string') {\n                    return token;\n                } else {\n                    var tag_name_type = 'TK_TAG_' + this.tag_type;\n                    return [token, tag_name_type];\n                }\n            }\n        };\n\n        this.get_full_indent = function(level) {\n            level = this.indent_level + level || 0;\n            if (level < 1) {\n                return '';\n            }\n\n            return Array(level + 1).join(this.indent_string);\n        };\n\n        this.is_unformatted = function(tag_check, unformatted) {\n            //is this an HTML5 block-level link?\n            if (!this.Utils.in_array(tag_check, unformatted)) {\n                return false;\n            }\n\n            if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {\n                return true;\n            }\n\n            //at this point we have an  tag; is its first child something we want to remain\n            //unformatted?\n            var next_tag = this.get_tag(true /* peek. */ );\n\n            // test next_tag to see if it is just html tag (no external content)\n            var tag = (next_tag || \"\").match(/^\\s*<\\s*\\/?([a-z]*)\\s*[^>]*>\\s*$/);\n\n            // if next_tag comes back but is not an isolated tag, then\n            // let's treat the 'a' tag as having content\n            // and respect the unformatted option\n            if (!tag || this.Utils.in_array(tag[1], unformatted)) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions\n\n            this.input = js_source || ''; //gets the input for the Parser\n\n            // HACK: newline parsing inconsistent. This brute force normalizes the input.\n            this.input = this.input.replace(/\\r\\n|[\\r\\u2028\\u2029]/g, '\\n');\n\n            this.output = [];\n            this.indent_character = indent_character;\n            this.indent_string = '';\n            this.indent_size = indent_size;\n            this.brace_style = brace_style;\n            this.indent_level = 0;\n            this.wrap_line_length = wrap_line_length;\n            this.line_char_count = 0; //count to see if wrap_line_length was exceeded\n\n            for (var i = 0; i < this.indent_size; i++) {\n                this.indent_string += this.indent_character;\n            }\n\n            this.print_newline = function(force, arr) {\n                this.line_char_count = 0;\n                if (!arr || !arr.length) {\n                    return;\n                }\n                if (force || (arr[arr.length - 1] !== '\\n')) { //we might want the extra line\n                    if ((arr[arr.length - 1] !== '\\n')) {\n                        arr[arr.length - 1] = rtrim(arr[arr.length - 1]);\n                    }\n                    arr.push('\\n');\n                }\n            };\n\n            this.print_indentation = function(arr) {\n                for (var i = 0; i < this.indent_level; i++) {\n                    arr.push(this.indent_string);\n                    this.line_char_count += this.indent_string.length;\n                }\n            };\n\n            this.print_token = function(text) {\n                // Avoid printing initial whitespace.\n                if (this.is_whitespace(text) && !this.output.length) {\n                    return;\n                }\n                if (text || text !== '') {\n                    if (this.output.length && this.output[this.output.length - 1] === '\\n') {\n                        this.print_indentation(this.output);\n                        text = ltrim(text);\n                    }\n                }\n                this.print_token_raw(text);\n            };\n\n            this.print_token_raw = function(text) {\n                // If we are going to print newlines, truncate trailing\n                // whitespace, as the newlines will represent the space.\n                if (this.newlines > 0) {\n                    text = rtrim(text);\n                }\n\n                if (text && text !== '') {\n                    if (text.length > 1 && text.charAt(text.length - 1) === '\\n') {\n                        // unformatted tags can grab newlines as their last character\n                        this.output.push(text.slice(0, -1));\n                        this.print_newline(false, this.output);\n                    } else {\n                        this.output.push(text);\n                    }\n                }\n\n                for (var n = 0; n < this.newlines; n++) {\n                    this.print_newline(n > 0, this.output);\n                }\n                this.newlines = 0;\n            };\n\n            this.indent = function() {\n                this.indent_level++;\n            };\n\n            this.unindent = function() {\n                if (this.indent_level > 0) {\n                    this.indent_level--;\n                }\n            };\n        };\n        return this;\n    }\n\n    /*_____________________--------------------_____________________*/\n\n    this.beautify = function() {\n        multi_parser = new Parser(); //wrapping functions Parser\n        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values\n        while (true) {\n            var t = multi_parser.get_token();\n            multi_parser.token_text = t[0];\n            multi_parser.token_type = t[1];\n\n            if (multi_parser.token_type === 'TK_EOF') {\n                break;\n            }\n\n            switch (multi_parser.token_type) {\n                case 'TK_TAG_START':\n                    multi_parser.print_newline(false, multi_parser.output);\n                    multi_parser.print_token(multi_parser.token_text);\n                    if (multi_parser.indent_content) {\n                        if ((multi_parser.indent_body_inner_html || !multi_parser.token_text.match(/<body(?:.*)>/)) &&\n                            (multi_parser.indent_head_inner_html || !multi_parser.token_text.match(/<head(?:.*)>/))) {\n\n                            multi_parser.indent();\n                        }\n\n                        multi_parser.indent_content = false;\n                    }\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_STYLE':\n                case 'TK_TAG_SCRIPT':\n                    multi_parser.print_newline(false, multi_parser.output);\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_END':\n                    //Print new line only if the tag has no content and has child\n                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n                        var tag_name = (multi_parser.token_text.match(/\\w+/) || [])[0];\n                        var tag_extracted_from_last_output = null;\n                        if (multi_parser.output.length) {\n                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\\s*(\\w+)/);\n                        }\n                        if (tag_extracted_from_last_output === null ||\n                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {\n                            multi_parser.print_newline(false, multi_parser.output);\n                        }\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_SINGLE':\n                    // Don't add a newline before elements that should remain unformatted.\n                    var tag_check = multi_parser.token_text.match(/^\\s*<([a-z-]+)/i);\n                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {\n                        multi_parser.print_newline(false, multi_parser.output);\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_HANDLEBARS_ELSE':\n                    // Don't add a newline if opening {{#if}} tag is on the current line\n                    var foundIfOnCurrentLine = false;\n                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n                        if (multi_parser.output[lastCheckedOutput] === '\\n') {\n                            break;\n                        } else {\n                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {\n                                foundIfOnCurrentLine = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!foundIfOnCurrentLine) {\n                        multi_parser.print_newline(false, multi_parser.output);\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    if (multi_parser.indent_content) {\n                        multi_parser.indent();\n                        multi_parser.indent_content = false;\n                    }\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_HANDLEBARS_COMMENT':\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                case 'TK_CONTENT':\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                case 'TK_STYLE':\n                case 'TK_SCRIPT':\n                    if (multi_parser.token_text !== '') {\n                        multi_parser.print_newline(false, multi_parser.output);\n                        var text = multi_parser.token_text,\n                            _beautifier,\n                            script_indent_level = 1;\n                        if (multi_parser.token_type === 'TK_SCRIPT') {\n                            _beautifier = typeof js_beautify === 'function' && js_beautify;\n                        } else if (multi_parser.token_type === 'TK_STYLE') {\n                            _beautifier = typeof css_beautify === 'function' && css_beautify;\n                        }\n\n                        if (options.indent_scripts === \"keep\") {\n                            script_indent_level = 0;\n                        } else if (options.indent_scripts === \"separate\") {\n                            script_indent_level = -multi_parser.indent_level;\n                        }\n\n                        var indentation = multi_parser.get_full_indent(script_indent_level);\n                        if (_beautifier) {\n\n                            // call the Beautifier if avaliable\n                            var Child_options = function() {\n                                this.eol = '\\n';\n                            };\n                            Child_options.prototype = options;\n                            var child_options = new Child_options();\n                            text = _beautifier(text.replace(/^\\s*/, indentation), child_options);\n                        } else {\n                            // simply indent the string otherwise\n                            var white = text.match(/^\\s*/)[0];\n                            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);\n                            text = text.replace(/^\\s*/, indentation)\n                                .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                                .replace(/\\s+$/, '');\n                        }\n                        if (text) {\n                            multi_parser.print_token_raw(text);\n                            multi_parser.print_newline(true, multi_parser.output);\n                        }\n                    }\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                default:\n                    // We should not be getting here but we don't want to drop input on the floor\n                    // Just output the text and move on\n                    if (multi_parser.token_text !== '') {\n                        multi_parser.print_token(multi_parser.token_text);\n                    }\n                    break;\n            }\n            multi_parser.last_token = multi_parser.token_type;\n            multi_parser.last_text = multi_parser.token_text;\n        }\n        var sweet_code = multi_parser.output.join('').replace(/[\\r\\n\\t ]+$/, '');\n\n        // establish end_with_newline\n        if (end_with_newline) {\n            sweet_code += '\\n';\n        }\n\n        if (eol !== '\\n') {\n            sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n\n        return sweet_code;\n    };\n}\n\nmodule.exports.Beautifier = Beautifier;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/* jshint curly: false */\n// This section of code is taken from acorn.\n//\n// Acorn was written by Marijn Haverbeke and released under an MIT\n// license. The Unicode regexps (for identifiers and whitespace) were\n// taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n// Whether a single character denotes a newline.\n\nexports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n// in javascript, these two differ\n// in python they are the same, different methods are called on them\nexports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\nexports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n// Test whether a given character code starts an identifier.\n\nexports.isIdentifierStart = function(code) {\n    // permit $ (36) and @ (64). @ is used in ES7 decorators.\n    if (code < 65) return code === 36 || code === 64;\n    // 65 through 91 are uppercase letters.\n    if (code < 91) return true;\n    // permit _ (95).\n    if (code < 97) return code === 95;\n    // 97 through 123 are lowercase letters.\n    if (code < 123) return true;\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n};\n\n// Test whether a given character is part of an identifier.\n\nexports.isIdentifierChar = function(code) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nfunction mergeOpts(allOptions, targetType) {\n    var finalOpts = {};\n    var name;\n\n    for (name in allOptions) {\n        if (name !== targetType) {\n            finalOpts[name] = allOptions[name];\n        }\n    }\n\n    //merge in the per type settings for the targetType\n    if (targetType in allOptions) {\n        for (name in allOptions[targetType]) {\n            finalOpts[name] = allOptions[targetType][name];\n        }\n    }\n    return finalOpts;\n}\n\nmodule.exports.mergeOpts = mergeOpts;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar Beautifier = __webpack_require__(0).Beautifier;\n\nfunction style_html(html_source, options, js_beautify, css_beautify) {\n    var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);\n    return beautifier.beautify();\n}\n\nmodule.exports = style_html;\n\n/***/ })\n/******/ ]);\nvar style_html = legacy_beautify_html;\n/* Footer */\nif (typeof define === \"function\" && define.amd) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    define([\"require\", \"./beautify\", \"./beautify-css\"], function(requireamd) {\n        var js_beautify = requireamd(\"./beautify\");\n        var css_beautify = requireamd(\"./beautify-css\");\n\n        return {\n            html_beautify: function(html_source, options) {\n                return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n            }\n        };\n    });\n} else if (typeof exports !== \"undefined\") {\n    // Add support for CommonJS. Just put this file somewhere on your require.paths\n    // and you will be able to `var html_beautify = require(\"beautify\").html_beautify`.\n    var js_beautify = require('./beautify.js');\n    var css_beautify = require('./beautify-css.js');\n\n    exports.html_beautify = function(html_source, options) {\n        return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n    };\n} else if (typeof window !== \"undefined\") {\n    // If we're running a web page and don't have either of the above, add our one global\n    window.html_beautify = function(html_source, options) {\n        return style_html(html_source, options, window.js_beautify, window.css_beautify);\n    };\n} else if (typeof global !== \"undefined\") {\n    // If we don't even have window, try global.\n    global.html_beautify = function(html_source, options) {\n        return style_html(html_source, options, global.js_beautify, global.css_beautify);\n    };\n}\n\n}());\n","export function convertHtmlToSafeHTML(html: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  fragment.querySelectorAll(['script', 'style', 'link', 'meta'].join(', '))\n    .forEach(ele => ele.remove())\n  return template.innerHTML\n}\n\nexport default convertHtmlToSafeHTML\n","import { loadConfigure } from '../../../../configure'\nimport { convertHtmlToAbsoluteLinkHTML } from './absolute'\nimport { convertHtmlToRelativeLinkHTML } from './relative'\nimport { convertHtmlToRootRelativeLinkHTML } from './root-relative'\n\nexport function convertHtmlToFormattedLinkHTML(html: string, baseUrl: string): string {\n  const { urlFormat } = loadConfigure()\n  switch (urlFormat) {\n    case 'absolute':\n      return convertHtmlToAbsoluteLinkHTML(html, baseUrl)\n    case 'relative':\n      return convertHtmlToRelativeLinkHTML(html, baseUrl)\n    case 'root-relative':\n      return convertHtmlToRootRelativeLinkHTML(html, baseUrl)\n    case 'original':\n      return html\n  }\n}\n\nexport * from './absolute'\nexport * from './relative'\nexport * from './root-relative'\n","export function convertHtmlToNoAttrHTML(html: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  fragment.querySelectorAll('*')\n    .forEach(ele => {\n      for (const attr of [...ele.attributes]) { // [...] is required\n        ele.removeAttribute(attr.name)\n      }\n    })\n  return template.innerHTML\n}\n\nexport default convertHtmlToNoAttrHTML\n","export function convertHtmlToOnlyATagHTML(html: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  const treeWalker = document.createTreeWalker(fragment, NodeFilter.SHOW_TEXT + NodeFilter.SHOW_ELEMENT)\n  const container = document.createElement('div')\n  while (treeWalker.nextNode()) {\n    const node = treeWalker.currentNode\n    if (node.nodeType === Node.TEXT_NODE) {\n      container.appendChild(node.cloneNode())\n    } else if (node.nodeType === Node.ELEMENT_NODE && node.nodeName === 'A') {\n      container.appendChild(node.cloneNode(true))\n      treeWalker.nextNode()\n    }\n  }\n  return container.innerHTML\n}\n\nexport default convertHtmlToOnlyATagHTML\n","import { loadConfigure } from '../../../configure'\nimport { convertHtmlToCommonmarkMarkdown } from './commonmark'\nimport { convertHtmlToGfmMarkdown } from './gfm'\nimport { convertHtmlToGhostMarkdown } from './ghost'\n\nexport function convertHtmlToMarkdown(html: string): string {\n  const { markdownFlavor } = loadConfigure()\n  switch (markdownFlavor) {\n    case 'commonmark':\n      return convertHtmlToCommonmarkMarkdown(html)\n    case 'gfm':\n      return convertHtmlToGfmMarkdown(html)\n    case 'ghost':\n      return convertHtmlToGhostMarkdown(html)\n  }\n}\n\nexport * from './commonmark'\nexport * from './gfm'\nexport * from './ghost'\n","import { HTML2BBCode } from 'html2bbcode'\n\nexport function convertHtmlToBBCode(html: string): string {\n  return (new HTML2BBCode()).feed(html).toString()\n}\n\nexport default convertHtmlToBBCode\n","\n(function (name, definition) {\n  if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && typeof define.amd === 'object') {\n    define(definition);\n  } else {\n    this[name] = definition();\n  }\n})('html2bbcode', function (html2bbcode) {\n\n  'use strict';\n\n  html2bbcode = { version: '1.2.3' };\n\n  //function HTMLAttribute()\n\n  function HTMLTag() {\n    this.name = '';\n    this.length = 0;\n    //this.attr = null;\n    //this.content = null;\n  }\n\n  HTMLTag.duptags = ['div', 'span'];\n  HTMLTag.headingtags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n  HTMLTag.selfendtags = ['!doctype', 'meta', 'link','img', 'br'];\n  HTMLTag.newlinetags = ['div', 'p', 'br', 'li', 'tr'].concat(HTMLTag.headingtags);\n  HTMLTag.noemptytags = ['head', 'style', 'script',\n    'span', 'a', 'font', 'color', 'size', 'face',\n    'strong', 'b', 'em', 'i', 'del', 's', 'ins', 'u'];\n  HTMLTag.noemptyattrtags = ['img'];\n\n  HTMLTag.prototype.findquoteend = function (script, start, multiline) {\n    var end = -1;\n    var i = start ? start : 0;\n    var len = script.length;\n    var d = script[i] === '\\\"';\n\n    i++;\n    while (i < len) {\n      if (script[i] === '\\\\') {\n        i++;\n        switch (script[i]) {\n          case 'u':\n            // \\uXXXX\n            i += 5;\n            break;\n          case 'x':\n            // \\xXX\n            i += 3;\n            break;\n          default:\n            // \\n ...\n            i++;\n            break;\n        }\n      } else if ((d && script[i] === '\\\"') || (!d && script[i] === '\\'')) {\n        end = i;\n        break;\n      } else if (script[i] === '\\n' && !multiline) {\n        // not allow change line\n        break;\n      } else {\n        i++;\n      }\n    }\n\n    return end;\n  };\n\n  HTMLTag.prototype.findscriptend = function (script, start) {\n    var end = -1;\n    var i = start ? start : 0;\n    var len = script.length;\n    var freg = /(['\"]|<\\s*?\\/\\s*?script\\s*?>)/ig;\n\n    while (i < len) {\n      if (script[i] === '\\\"' || script[i] === '\\'') {\n        var qi = this.findquoteend(script, i, true);\n        if (qi === -1) {\n          break;\n        }\n        i = qi + 1;\n      } else {\n        freg.lastIndex = i;\n        var m = freg.exec(script);\n        if (!m || m.length <= 0) {\n          break;\n        } else if (m[0][0] === '<') {\n          //script here\n          end = freg.lastIndex - m[0].length;\n          break;\n        }\n        // quote\n        i = freg.lastIndex - 1;\n        //console.log(i, script.substr(i, 5));\n        continue;\n      }\n    }\n    return end;\n  };\n\n  HTMLTag.prototype.quote = function (quotation) {\n    // convert string type\n    if (quotation[0] === '\\'') {\n      var s = '\"';\n      var i = 1;\n      var len = quotation.length - 1; // last is \\'\n      var start = i;\n      while (i < len) {\n        if (quotation[i] === '\\\\') {\n          i++;\n          switch (quotation[i]) {\n            case 'u':\n              // \\uXXXX\n              i += 5;\n              break;\n            case 'x':\n              // \\xXX\n              i += 3;\n              break;\n            default:\n              // \\n ...\n              i++;\n              break;\n          }\n        } else if (quotation[i] === '\\\"') {\n          s += quotation.substr(start, i - start);\n          s += '\\\\\"';\n          i++;\n          start = i;\n          break;\n        } else {\n          i++;\n        }\n      }\n      if (start < len) {\n        s += quotation.substr(start, len - start);\n      }\n      s += '\"';\n      return s;\n    } else {\n      return quotation;\n    }\n  };\n\n  HTMLTag.prototype.parseStyle = function (style) {\n    var ss = style.split(';');\n    var r_style = {};\n    var count = 0;\n    for (var i = 0; i < ss.length; i++) {\n      var s = ss[i].split(':');\n      if (s.length >= 2) {\n        count++;\n        var val;\n        if (s.length > 2) {\n          // eg. url(http://example.com)\n          val = s.slice(1).join(':').trim();\n        } else {\n          val = s[1].trim();\n        }\n        if (val[0] === '\\'' && val[val.length - 1] === '\\'') {\n          try {\n            val = JSON.parse(this.quote(val));\n          } catch (err) {\n          }\n        }\n        r_style[s[0].trim().toLowerCase()] = val;\n      }\n    }\n    if (count > 0) {\n      return r_style;\n    } else {\n      return undefined;\n    }\n  };\n\n  HTMLTag.prototype.parseAttributes = function (attr) {\n    attr = attr.trim();\n    var blank = /\\s/;\n    var i = 0;\n    var len = attr.length;\n    var start = i;\n    var lastkey = null;\n    var invalue = false;\n    var r_attr = {};\n    var add_attr = function (k, v) {\n      if (typeof v === 'undefined') {\n        v = null;\n      }\n      k = k.trim().toLowerCase();\n      r_attr[k] = v;\n    };\n    while (i < len) {\n      if (attr[i] === '=') {\n        // TODO: check lastkey, currently drop previous lastkey\n        lastkey = attr.substr(start, i - start);\n        invalue = false;\n      } else if (blank.test(attr[i])) {\n        if (lastkey && invalue) {\n          add_attr(lastkey, attr.substr(start, i - start));\n          invalue = false;\n          lastkey = null;\n        } else if (i - start > 0) {\n          lastkey = attr.substr(start, i - start);\n          add_attr(lastkey);\n          lastkey = null;\n        }\n        start = i + 1;\n      } else if (lastkey && !invalue) {\n        start = i;\n        if (attr[i] === '\"' || attr[i] === '\\'') {\n          var b = attr[i] === '\\'';\n          i = this.findquoteend(attr, i);\n          if (i === -1) {\n            break;\n          }\n          var v = attr.substr(start, i + 1 - start);\n          if (b) {\n            v = this.quote(v);\n          }\n          try {\n            v = JSON.parse(v);\n          } catch (e) {\n          }\n          add_attr(lastkey, v);\n          lastkey = null;\n          start = i + 1;\n        } else {\n          invalue = true;\n        }\n      }\n      i++;\n    }\n    if (start < len) {\n      var d = attr.substr(start);\n      if (lastkey) {\n        add_attr(lastkey, d);\n      } else {\n        add_attr(d);\n      }\n      lastkey = null;\n    }\n    var count = 0;\n    for (var k in r_attr) {\n      count++;\n    }\n    if (count > 0) {\n      if (r_attr.style) {\n        r_attr.style = this.parseStyle(r_attr.style);\n      }\n      this.attr = r_attr;\n    }\n  };\n\n  HTMLTag.prototype.parse = function (html) {\n    var i = 0;\n    if (html[i] !== '<') {\n      throw new Error('not a tag');\n    }\n    var len = html.length;\n    var blank = /\\s/;\n    //var htmltagq = /[<>]/;\n    // strip tagname head blank\n    while (i < len) {\n      if (html[i] === '<') {\n        i++;\n      } else if (html[i] === '>') {\n        // drop this empty tag\n        this.length = i + 1;\n        return this;\n      } else if (blank.test(html[i])) {\n        i++;\n      } else {\n        break;\n      }\n    }\n    if (i >= len) {\n      // drop this\n      this.length = len;\n      return this;\n    }\n\n    // name\n    var start = i;\n    var tagheadend = false;\n    while (i < len && !blank.test(html[i])) {\n      if (html[i] === '>') {\n        tagheadend = true;\n        break;\n      } else if (html[i] === '/') {\n        break;\n      }\n      i++;\n    }\n    if (i >= len) {\n      // drop this\n      this.length = i;\n      return this;\n    }\n    this.name = html.substr(start, i - start).trim().toLowerCase();\n    if (this.name.length > 0 && this.name[0] === '/') {\n      this.length = i;\n      this.name = this.name.substr(1);\n      this.selfend = true;\n      return this;\n    }\n    if (HTMLTag.selfendtags.indexOf(this.name) >= 0) {\n      this.selfend = true;\n    }\n\n    // attr\n    if (!tagheadend) {\n      start = i;\n      while (i < len && html[i] !== '>') {\n        i++;\n      }\n      if (i >= len) {\n        // drop this\n        this.length = i;\n        return this;\n      } else if (i - start > 0) {\n        var sattr = html.substr(start, i - start).trim();\n        var attrlen = sattr.length;\n        if (attrlen > 0 && sattr[attrlen - 1] === '/') {\n          this.selfend = true;\n          sattr = sattr.substr(0, attrlen - 1);\n        }\n        this.parseAttributes(sattr);\n      }\n    }\n    i++; // skip '>'\n\n    if (this.selfend) {\n      this.length = i;\n      return this;\n    }\n\n    // content\n    var that = this;\n    var add_content = function (html) {\n      var hstack = new HTMLStack().parse(html);\n      if (that.content) {\n        that.content.append(hstack);\n      } else {\n        that.content = hstack;\n      }\n      return hstack.length;\n    };\n\n    if (this.name === 'script') {\n      var script_len = this.findscriptend(html.substr(i));\n      if (script_len < 0) {\n        this.length = len;\n        return this;\n      }\n\n      this.content = new HTMLStack();\n      var script = html.substr(i, script_len);\n      this.content.length = script_len;\n      this.content.stack = [ script ];\n\n      i += script_len;\n      // script tag end\n      start = html.indexOf('>', i);\n      if (start < 0) {\n        // no possible\n        this.length = len;\n        return this;\n      }\n\n      this.length = start + 1;\n      return this;\n    }\n\n    var j = 0;\n    while (i < len) {\n      // loop to tag end\n      j++;\n      start = i;\n\n      while (i < len && blank.test(html[i])) {\n        i++;\n      }\n\n      while (i < len && html[i] !== '<') {\n        i++;\n      }\n\n      var i_tagend = i;\n      i++;\n      while (i < len && blank.test(html[i])) {\n        i++;\n      }\n\n      if (i >= len) {\n        // drop this\n        this.content = new HTMLStack().parse(html.substr(start));\n        this.length = len;\n        return this;\n      } else {\n        if (i < len && html[i] === '/') {\n          i++;\n          while (i < len && blank.test(html[i])) {\n            i++;\n          }\n          if (i >= len) {\n            // drop this\n            i += add_content(html.substr(start));\n            this.length = len;\n            return this;\n          } else {\n            var t_start = i;\n            var t_tagheadend = false;\n            while (i < len && !blank.test(html[i])) {\n              if (html[i] === '>') {\n                t_tagheadend = true;\n                break;\n              }\n              i++;\n            }\n            if (i > t_start) {\n              if (!t_tagheadend) {\n                while (i < len && html[i] !== '>') {\n                  i++;\n                }\n              }\n              var ename = html.substr(t_start, i - t_start).trim().toLowerCase();\n              i++; //skip '>'\n              // force stop current tag\n              /*if (ename === this.name)*/ {\n                // end of tag\n                this.length = i;\n                if (i_tagend > start) {\n                  // add content\n                  add_content(html.substr(start, i_tagend - start));\n                }\n                return this;\n              }\n            }\n          }\n        }\n      }\n\n      i = start + add_content(html.substr(start));\n    }\n\n    this.length = i;\n    return this;\n  };\n\n  function HTMLStack() {\n    this.stack = [];\n    this.length = 0;\n  }\n\n  HTMLStack.prototype.parse = function (html) {\n    // check first...\n    if (!html) {\n      return this;\n    }\n\n    var i = 0;\n    var len = html.length;\n    var lasttagend = 0;\n    var blank = /\\s/;\n    var that = this;\n    var push_plaintext = function (start, end) {\n      if (start < end) {\n        that.push(html.substr(start, end - start));\n      }\n    };\n    while (i < len) {\n      switch (html[i]) {\n        case '<':\n          push_plaintext(lasttagend, i);\n\n          // check end & drop\n          var t_i = i + 1;\n          while (t_i < len && blank.test(html[t_i])) {\n            t_i++;\n          }\n          if (t_i < len && html[t_i] === '/') {\n            return this;\n          }\n\n          var tag = new HTMLTag().parse(html.substr(i));\n          this.push(tag);\n          i += tag.length;\n          lasttagend = i;\n          break;\n        case '>':\n          // TODO: drop the >\n          i++;\n          break;\n        default:\n          i++;\n          break;\n      }\n    }\n    push_plaintext(lasttagend, len);\n    return this;\n  };\n\n  HTMLStack.prototype.push = function (data) {\n    this.length += data.length;\n    this.stack.push(data);\n  };\n\n  HTMLStack.prototype.pop = function () {\n    return this.stack.pop();\n  };\n\n  HTMLStack.prototype.append = function (hstack) {\n    this.stack = this.stack.concat(hstack.stack);\n    this.length += hstack.length;\n  };\n\n  (function () {\n    var dupRegex = new RegExp(\n      '<\\\\s*?(' + HTMLTag.duptags.join('|') + ')\\\\s*?>\\\\s*?'\n      + '<\\\\s*?\\\\1\\\\s*?>'\n      + '(((?!<\\\\s*?\\\\1\\\\s*?>)[\\\\S\\\\s])*?)'\n      + '<\\\\s*?/\\\\s*?\\\\1\\\\s*?>\\\\s*?'\n      + '<\\\\s*?/\\\\s*?\\\\1\\\\s*?>', 'ig');\n    var nlsRegex = new RegExp(\n      '(<\\\\s*?(' + HTMLTag.newlinetags.join('|') + ')(\\\\s[^>]*?)?>)\\\\s+', 'ig');\n    var nleRegex = new RegExp(\n      '\\\\s+(<\\\\s*?/\\\\s*?(' + HTMLTag.newlinetags.join('|') + ')\\\\s*?>)', 'ig');\n    var empRegex = new RegExp(\n      '<\\\\s*?(' + HTMLTag.noemptytags.join('|') + ')(\\\\s[^>]*?)?>'\n      + '<\\\\s*?/\\\\s*?\\\\1\\\\s*?>', 'ig');\n    HTMLStack.minify = function (html) {\n      var preRegex = /<pre(\\s.*?)?>/ig;\n      var endPreRegex = /<\\/pre>/ig;\n      var emptyRegex = /\\s{2,}/g;\n      var m, newHtml = '', preMarkIndex = -1;\n      html = html.replace(empRegex, '');\n      html = html.replace(nlsRegex, '$1');\n      html = html.replace(nleRegex, '$1');\n      while (m = preRegex.exec(html)) {\n        if (preMarkIndex < 0) {\n          preMarkIndex = 0;\n        }\n        newHtml += html.substr(preMarkIndex, preRegex.lastIndex - preMarkIndex).replace(emptyRegex, ' ');\n        preMarkIndex = preRegex.lastIndex;\n        endPreRegex.lastIndex = preRegex.lastIndex;\n        if (m = endPreRegex.exec(html)) {\n          preRegex.lastIndex = endPreRegex.lastIndex;\n          // no replace for pre content\n          newHtml += html.substr(preMarkIndex, m.index - preMarkIndex);\n          preMarkIndex = m.index;\n        }\n      }\n      if (preMarkIndex >= 0) {\n        html = newHtml + html.substr(preMarkIndex).replace(emptyRegex, ' ');\n      } else {\n        html = html.replace(emptyRegex, ' ');\n      }\n      while (dupRegex.test(html)) {\n        html = html.replace(dupRegex, '<$1>$2</$1>');\n      }\n      return html;\n    };\n  })();\n\n  var escapeMap = {\n    '&': 'amp',\n    '<': 'lt',\n    '>': 'gt',\n    '\"': 'quot',\n    \"'\": '#x27',\n    '`': '#x60'\n  };\n  var unescapeMap = {\n    'nbsp': ' ',\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  };\n\n  HTMLStack.unescape = function (str, nonbsp) {\n    var src = '&([a-zA-Z]+?|#[xX][\\\\da-fA-F]+?|#\\\\d+?);';\n    var testRegexp = new RegExp(src);\n    var escaper = function (match, m1) {\n      m1 = m1.toLowerCase();\n      if (nonbsp && m1 === 'nbsp') {\n        return '&nbsp;';\n      }\n      var m = unescapeMap[m1];\n      if (m) {\n        return m;\n      } else if (m1[0] === '#') {\n        var code = 0;\n        if (m1[1] == 'x') {\n          code = parseInt(m1.substr(2), 16);\n        } else {\n          code = parseInt(m1.substr(1));\n        }\n        if (code) {\n          return String.fromCharCode(code);\n        }\n      }\n      return '';\n    };\n    if (testRegexp.test(str)) {\n      var replaceRegexp = new RegExp(src, 'g');\n      str = str.replace(replaceRegexp, escaper);\n    }\n    return str;\n  };\n\n  HTMLStack.prototype.decode = function (nonbsp) {\n    for (var i = 0; i < this.stack.length; i++) {\n      var s = this.stack[i];\n      if (typeof s === 'string') {\n        this.stack[i] = HTMLStack.unescape(s, nonbsp);\n      } else if (s instanceof HTMLTag && s.content) {\n        s.content.decode(nonbsp);\n      }\n    }\n    return this;\n  };\n\n  HTMLStack.prototype.dedup = function () {\n    for (var i = 0; i < this.stack.length; i++) {\n      var s = this.stack[i];\n      if (s instanceof HTMLTag && s.content) {\n        if (HTMLTag.duptags.indexOf(s.name) >= 0 && !s.attr && s.content.stack.length === 1) {\n          var ts = s.content.stack[0];\n          if (ts.name === s.name) {\n            this.stack[i] = ts;\n            i--;\n            continue;\n          }\n        }\n        s.content.dedup();\n      }\n    }\n    return this;\n  };\n\n  HTMLStack.prototype.strip = function (parent, afternewline) {\n\n    if (!afternewline) {\n      afternewline = (parent && !afternewline) ? (HTMLTag.newlinetags.indexOf(parent.name) >= 0) : true;\n    }\n\n    var blanks = /^\\s*$/;\n    var k = 0;\n    var stag = true;\n    // first recursive\n    for (var i = 0; i < this.stack.length; i++) {\n      var s = this.stack[i];\n      if (s instanceof HTMLTag) {\n        stag = true;\n        if (s.content) {\n          //check if is after newline\n          var anl;\n          if (k <= 0) {\n            anl = afternewline;\n          } else {\n            anl = false;\n            // fine previous one\n            for (var j = i - 1; j >= 0; j--) {\n              var ts = this.stack[j];\n              if (ts instanceof HTMLTag) {\n                anl = (HTMLTag.newlinetags.indexOf(ts.name) >= 0);\n                //anl = true;\n                break;\n              } else if (typeof ts === 'string' && blanks.test(ts)) {\n                //continue;\n              } else {\n                break;\n              }\n            }\n          }\n          s.content.strip(s, anl);\n        }\n      } else if (typeof s === 'string' && blanks.test(s)) {\n        if (stag) {\n          continue;\n        }\n      }\n      k++;\n    }\n\n    stag = true;\n    var new_stack = [];\n    var new_len = 0;\n    for (var i = 0; i < this.stack.length; i++) {\n      var s = this.stack[i];\n      if (typeof s === 'string' && blanks.test(s) && afternewline) {\n        if (stag) {\n          continue;\n        }\n        afternewline = false;\n      } else if (s instanceof HTMLTag) {\n        stag = true;\n        if (HTMLTag.noemptyattrtags.indexOf(s.name) >= 0) {\n          // strip like <img src=\"\" />\n          if (!s.attr) {\n            continue;\n          }\n          var exists = false;\n          for (var k1 in s.attr) {\n            if (s.attr[k1]) {\n              exists = true;\n              break;\n            }\n          }\n          if (!exists) {\n            continue;\n          }\n        }\n        if (HTMLTag.noemptytags.indexOf(s.name) >= 0 && !s.content) {\n          // null span\n          continue;\n        } else if (HTMLTag.newlinetags.indexOf(s.name) >= 0) {\n          afternewline = true;\n        /*} else if (s.name === 'span' && afternewline) {*/\n          // keep newline flag\n        } else {\n          afternewline = false;\n        }\n      } else {\n        // not full empty string\n        if (afternewline) {\n          // removehead space after newline\n          s = s.replace(/^\\s+/g, '');\n          if (!s) {\n            // empty string\n            continue;\n          }\n        }\n        s = s.replace(/\\s+/g, ' ');\n        stag = false;\n        afternewline = false;\n      }\n      new_len++;\n      new_stack.push(s);\n    }\n\n    // check last one is empty string\n    var s = new_stack[new_len - 1];\n    if (typeof s === 'string') {\n      if (new_len >= 2 && blanks.test(s)) {\n        // remove last empty string\n        new_stack.splice(new_len - 1, 1);\n        new_len--;\n      } else if (/\\S\\s+$/.test(s)) {\n        // space follow with a non-space string\n        new_stack[new_len - 1] = s.replace(/\\s+$/, '');\n      }\n    }\n\n    if (new_len <= 0 && parent) {\n      delete parent.content;\n      return;\n    }\n\n    this.stack = new_stack;\n    return this;\n  };\n\n  HTMLStack.prototype.showtree = function (tab, depth) {\n    if (!tab) tab = '';\n    if (!depth) depth = 0;\n\n    for (var i = 0; i < this.stack.length; i++) {\n      var d = this.stack[i];\n      if (d instanceof HTMLTag) {\n        console.log(tab, d.name, d.attr ? JSON.stringify(d.attr) : '');\n        if (d.content) {\n          d.content.showtree(tab + '--', depth + 1);\n        }\n      } else if (typeof d === 'string') {\n        console.log(tab, JSON.stringify(d));\n      }\n    }\n  };\n\n  function BBCode() {\n    this.s = '';\n    this.weaknewline = true;\n    this.stack = [];\n  }\n\n  BBCode.maps = {\n    'a': { section: 'url', attr: 'href' },\n    'img': { section: 'img', data: 'src', empty: true },\n    'em': { section: 'i' },\n    'i': { section: 'i' },\n    'strong': { section: 'b' },\n    'b': { section: 'b' },\n    'del': { section: 's' },\n    's': { section: 's' },\n    'ins': { section: 'u' },\n    'u': { section: 'u' },\n    'center': { section: 'center' },\n    'ul': { section: 'ul' },  // may need to treat as 'list'\n    'ol': { section: 'ol' },  // may need to treat as 'list'\n    'li': { section: 'li', newline: 1 },\n    'blockquote': { section: 'quote' },\n    'code': { section: 'code' },\n    'pre': { section: 'code' },\n    'font': { extend: ['color', 'face', 'size'] },\n    'span': { extend: ['color', 'face', 'size'] },\n    'color': { section: 'color', attr: 'color' },\n    'size': { section: 'size', attr: 'size' },\n    'face': { section: 'font', attr: 'face' },\n    // new line tags\n    'h1': { section: 'h1', newline: 1 },\n    'h2': { section: 'h2', newline: 1 },\n    'h3': { section: 'h3', newline: 1 },\n    'h4': { section: 'h4', newline: 1 },\n    'h5': { section: 'h5', newline: 1 },\n    'h6': { section: 'h6', newline: 1 },\n    'p': { newline: 1 },\n    'br': { newline: 2, empty: true },\n    'table': { newline: 1 },\n    'tr': { newline: 1 },\n    'div': { newline: 0 },\n    // ignore tags\n    '!doctype': { ignore: true },\n    'head': { ignore: true },\n    'style': { ignore: true },\n    'script': { ignore: true },\n    'meta': { ignore: true },\n    'link': { ignore: true },\n  };\n\n  BBCode.prototype.open = function (section, attr, data) {\n    if (!section) {\n      return;\n    }\n    if (section instanceof Array) {\n      this.stack = this.stack.concat(section);\n    } else {\n      this.stack.push({\n        section: section,\n        attr: attr,\n        data: data\n      });\n    }\n  };\n\n  BBCode.prototype.append = function (str) {\n    this.solidify();\n    this._append(str);\n  };\n\n  BBCode.prototype._append = function (str) {\n    if (str) {\n      this.s += str;\n      this.weaknewline = false;\n    }\n  };\n\n  BBCode.prototype.solidify = function () {\n    // write back stack\n    var i;\n    for (i = 0; i < this.stack.length; i++) {\n      var st = this.stack[i];\n      var section = st.section;\n      var attr = st.attr;\n      var data = st.data;\n\n      var s = '[' + section;\n      if (typeof attr === 'string') {\n        s += '=' + attr;\n      } else {\n        for (var k in attr) {\n          s += ' ' + k + '=' + attr[k];\n        }\n      }\n      s += ']';\n      if (data) {\n        s += data;\n      }\n\n      this._append(s);\n    }\n    if (i > 0) {\n      this.stack = [];\n    }\n  };\n\n  BBCode.prototype.close = function (section) {\n    if (!section) {\n      return;\n    }\n    this.solidify();\n    this._append('[/' + section + ']');\n  };\n\n  BBCode.prototype.rollback = function () {\n    this.stack = [];\n  };\n\n  BBCode.prototype.newline = function (n) {\n    if (n === 2) {\n      // br\n      this.append('\\n');\n      this.weaknewline = true;\n    } else if (n === 1) {\n      // div, p\n      if (!this.weaknewline) {\n        this.append('\\n');\n        this.weaknewline = true;\n      }\n    } else if (!this.weaknewline) {\n      this.append('\\n');\n      this.weaknewline = true;\n    }\n  };\n\n  BBCode.prototype.toString = function () {\n    return this.s;\n  };\n\n  // opts: transsize, imagescale\n  function HTML2BBCode(opts) {\n    this.opts = opts ? opts : {};\n  }\n\n  HTML2BBCode.prototype.color = function (c) {\n    if (!c) return;\n    var c1Regex = /rgba?\\s*?\\(\\s*?(\\d{1,3})\\s*?,\\s*?(\\d{1,3})\\s*?,\\s*?(\\d{1,3})\\s*?.*?\\)/i;\n    if (c1Regex.test(c)) {\n      var pad2 = function (s) {\n        if (s.length < 2) {\n          s = '0' + s;\n        }\n        return s;\n      }\n      c = c.replace(c1Regex, function (match, r, g, b) {\n        r = pad2(parseInt(r).toString(16));\n        g = pad2(parseInt(g).toString(16));\n        b = pad2(parseInt(b).toString(16));\n        return '#' + r + g + b;\n      });\n    }\n    return c;\n  };\n\n  HTML2BBCode.prototype.size = function (size) {\n    if (!size) return;\n\n    var px2size = [0, 12, 14, 16, 18, 24, 32, 48];\n    var name2size = [null, 'smaller', 'small', 'medium', 'large',\n      'x-large', 'xx-large', '-webkit-xxx-large'];\n\n    if (/^\\d+$/.test(size)) {\n      return size;\n    } else if (/^\\d+?px$/.test(size)) {\n      size = parseInt(size);\n      if (!size || size < 0) {\n        return;\n      }\n      if (this.opts.transsize) {\n        for (var i = px2size.length; i >= 0; i--) {\n          if (i === 0) {\n            // smallest\n            return '1';\n          }\n          if (size >= px2size[i]) {\n            return i.toString();\n          }\n        }\n      } else {\n        return size.toString();\n      }\n    } else {\n      var ns = name2size.indexOf(size);\n      if (ns > 0) {\n        if (this.opts.transsize) {\n          return ns.toString();\n        } else {\n          return px2size[ns].toString();\n        }\n      }\n\n      // TODO: support other type\n      return;\n    }\n\n    return size ? size.toString() : undefined;\n  };\n\n  HTML2BBCode.prototype.px = function (px) {\n    if (!px) return;\n    px = parseInt(px);\n    return px ? px.toString() : undefined;\n  };\n\n  HTML2BBCode.prototype.convertStyle = function (htag, sec) {\n    if (!sec) {\n      return;\n    }\n    var bbs = [];\n    var that = this;\n    var opts = this.opts;\n    var addbb = function (sec) {\n      if (!sec || sec.ignore ||\n        !(sec.section || (sec.extend && sec.extend.length > 0))) {\n        return;\n      }\n      var tsec = { section: sec.section };\n      if (sec.attr) {\n        if (htag.attr) {\n          switch (sec.section) {\n            case 'size':\n              tsec.attr = that.size(htag.attr[sec.attr]);\n              break;\n            case 'color':\n              tsec.attr = that.color(htag.attr[sec.attr]);\n              break;\n            default:\n              tsec.attr = htag.attr[sec.attr];\n              break;\n          }\n          if (htag.attr.style) {\n            var ra;\n            switch (sec.section) {\n              case 'size':\n                ra = htag.attr.style['font-size'];\n                if (ra) ra = that.size(ra);\n                break;\n              case 'color':\n                ra = htag.attr.style['color'];\n                if (ra) ra = that.color(ra);\n                break;\n              case 'font':\n                ra = htag.attr.style['font-family'];\n                break;\n            }\n            if (ra) {\n              tsec.attr = ra;\n            }\n          }\n          if (!tsec.attr) {\n            return;\n          }\n        } else {\n          return;\n        }\n      } else if (sec.section === 'img' && opts.imagescale) {\n        // image attr\n        var w, h;\n        if (htag.attr) {\n          w = that.px(htag.attr['width']);\n          h = that.px(htag.attr['height']);\n          if (htag.attr.style) {\n            var w1, h1;\n            w1 = that.px(htag.attr.style['width']);\n            h1 = that.px(htag.attr.style['height']);\n            if (w1) w = w1;\n            if (h1) h = h1;\n          }\n          if (w && h) {\n            tsec.attr = w + 'x' + h;\n          } else if (w || h) {\n            if (w) {\n              tsec.attr = { width: w };\n            } else {\n              tsec.attr = { height: h };\n            }\n          }\n        }\n      }\n      if (sec.data) {\n        tsec.data = htag.attr[sec.data];\n      }\n      bbs.push(tsec);\n    };\n    // check font-weight & text-align\n    if (htag.attr && htag.attr.style) {\n      if (htag.name !== 'b' && htag.name !== 'strong') {\n        var att = htag.attr.style['font-weight'];\n        if (att === 'bold' || (/^\\d+$/.test(att) && parseInt(att) >= 700)) {\n          addbb(BBCode.maps['b']);\n        }\n      }\n      if (htag.name !== 'center') {\n        var att = htag.attr.style['text-align'];\n        if (att === 'center' && !opts.noalign) {\n          addbb(BBCode.maps['center']);\n        }\n      }\n      if (htag.name !== 'em' && htag.name !== 'i') {\n        var att = htag.attr.style['font-style'];\n        if (att === 'italic' || att === 'oblique') {\n          // italic style\n          addbb(BBCode.maps['i']);\n        }\n      }\n    }\n    if (sec.section === 'list'\n        || sec.section === 'ul' || sec.section === 'ol'\n        || sec.section === 'li') {\n      if (opts.nolist) {\n        return [];\n      }\n    } else if (sec.section === 'center') {\n      if (opts.noalign) {\n        return [];\n      }\n    } else if (/^h\\d+$/.test(sec.section)) {\n      // HTML Headings\n      if (opts.noheadings) {\n        // 18.5 -> 19\n        var headings2size = [ null, '32px', '24px', '19px', '16px', '14px', '12px' ];\n        var m = sec.section.match(/^h(\\d+)$/);\n        var hi = parseInt(m[1]);\n        if (hi <= 0) {\n          return [];\n        } else if (hi >= headings2size.length) {\n          hi = headings2size.length;\n        }\n        bbs.push({ section: 'size', attr: that.size(headings2size[hi]) });\n        return bbs;\n      }\n    }\n\n    if ('extend' in sec) {\n      for (var i = 0; i < sec.extend.length; i++) {\n        var tag = sec.extend[i];\n        addbb(BBCode.maps[tag]);\n      }\n    } else {\n      addbb(sec);\n    }\n    return bbs;\n  };\n\n  HTML2BBCode.prototype.convert = function (hstack) {\n    var bbcode = new BBCode();\n    if (!hstack) {\n      return bbcode;\n    }\n    var that = this;\n    var recursive = function (hs, anl) {\n      for (var i = 0; i < hs.length; i++) {\n        var s = hs[i];\n        if (s instanceof HTMLTag) {\n          if (s.name in BBCode.maps) {\n            var fnewline = 0;\n            var sec = BBCode.maps[s.name];\n            if (sec.ignore) {\n              continue;\n            }\n            if ('newline' in sec) {\n              fnewline = sec.newline;\n              bbcode.newline(sec.newline);\n            }\n            if (!s.content && !sec.empty) {\n              // drop this\n              continue;\n            }\n            var bbs = that.convertStyle(s, sec);\n            bbcode.open(bbs);\n\n            if (s.content) {\n              recursive(s.content.stack, fnewline);\n            }\n            for (var j = bbs.length - 1; j >= 0; j--) {\n              bbcode.close(bbs[j].section);\n            }\n            if (fnewline) {\n              // weak new line\n              bbcode.newline();\n            }\n          } else if (s.content) {\n            // drop section\n            recursive(s.content.stack);\n          }\n        } else if (typeof s === 'string') {\n          // force space\n          //s = s.replace(/&nbsp;/gi, ' ');\n          bbcode.append(s);\n        }\n      }\n    };\n    recursive(hstack.stack);\n    return bbcode;\n  };\n\n  HTML2BBCode.prototype.parse = function (html) {\n    return new HTMLStack().parse(html)\n      .strip().dedup().decode();\n  };\n\n  HTML2BBCode.prototype.feed = function (html) {\n    var hstack = this.parse(html);\n    if (this.opts.debug) {\n      hstack.showtree();\n    }\n    var bbcode = this.convert(hstack);\n    return bbcode;\n  };\n\n  return {\n    HTMLTag: HTMLTag,\n    HTMLStack: HTMLStack,\n    BBCode: BBCode,\n    HTML2BBCode: HTML2BBCode\n  };\n\n});\n","export * from './plain'\n","export function convertHtmlToPlainText(html: string): string {\n  const template = document.createElement('template')\n  template.innerHTML = html\n  const fragment = template.content\n  return fragment.textContent!\n}\n\nexport default convertHtmlToPlainText\n","export * from './raw-string'\nexport * from './trim'\nexport * from './decode-entities'\n","export function convertTextToRawString(text: string): string {\n  return text.replace(/\\\\/g, String.raw`\\\\`)\n    .replace(/\\r/g, String.raw`\\r`)\n    .replace(/\\t/g, String.raw`\\t`)\n    .replace(/\\f/g, String.raw`\\f`)\n    .replace(/\\n/g, String.raw`\\n`)\n    .replace(/\\'/g, String.raw`\\'`)\n    .replace(/\\\"/g, String.raw`\\\"`)\n}\n\nexport default convertTextToRawString\n","export function convertTextToTrimmedText(text: string): string {\n  return text\n    .replace(/^\\s+/, '')\n    .replace(/\\s+$/, '')\n}\n\nexport default convertTextToTrimmedText\n","import * as ent from 'ent'\n\nexport function convertTextToDecodeEntitiesText(text: string): string {\n  return ent.decode(text)\n}\n\nexport default convertTextToDecodeEntitiesText\n","exports.encode = require('./encode');\nexports.decode = require('./decode');\n","var punycode = require('punycode');\nvar revEntities = require('./reversed.json');\n\nmodule.exports = encode;\n\nfunction encode (str, opts) {\n    if (typeof str !== 'string') {\n        throw new TypeError('Expected a String');\n    }\n    if (!opts) opts = {};\n\n    var numeric = true;\n    if (opts.named) numeric = false;\n    if (opts.numeric !== undefined) numeric = opts.numeric;\n\n    var special = opts.special || {\n        '\"': true, \"'\": true,\n        '<': true, '>': true,\n        '&': true\n    };\n\n    var codePoints = punycode.ucs2.decode(str);\n    var chars = [];\n    for (var i = 0; i < codePoints.length; i++) {\n        var cc = codePoints[i];\n        var c = punycode.ucs2.encode([ cc ]);\n        var e = revEntities[cc];\n        if (e && (cc >= 127 || special[c]) && !numeric) {\n            chars.push('&' + (/;$/.test(e) ? e : e + ';'));\n        }\n        else if (cc < 32 || cc >= 127 || special[c]) {\n            chars.push('&#' + cc + ';');\n        }\n        else {\n            chars.push(c);\n        }\n    }\n    return chars.join('');\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var punycode = require('punycode');\nvar entities = require('./entities.json');\n\nmodule.exports = decode;\n\nfunction decode (str) {\n    if (typeof str !== 'string') {\n        throw new TypeError('Expected a String');\n    }\n\n    return str.replace(/&(#?[^;\\W]+;?)/g, function (_, match) {\n        var m;\n        if (m = /^#(\\d+);?$/.exec(match)) {\n            return punycode.ucs2.encode([ parseInt(m[1], 10) ]);\n        } else if (m = /^#[Xx]([A-Fa-f0-9]+);?/.exec(match)) {\n            return punycode.ucs2.encode([ parseInt(m[1], 16) ]);\n        } else {\n            // named entity\n            var hasSemi = /;$/.test(match);\n            var withoutSemi = hasSemi ? match.replace(/;$/, '') : match;\n            var target = entities[withoutSemi] || (hasSemi && entities[match]);\n\n            if (typeof target === 'number') {\n                return punycode.ucs2.encode([ target ]);\n            } else if (typeof target === 'string') {\n                return target;\n            } else {\n                return '&' + match;\n            }\n        }\n    });\n}\n","export * from './beautify'\n","function removeExtraLine(text: string): string {\n  return text.replace(/^\\s+^/mg, '\\n').replace(/$\\s+$/mg, '\\n')\n}\n\nfunction removeLineTailBlank(text: string) {\n  return text.split('\\n').map(line => line.trimRight()).join('\\n')\n}\n\nexport function convertMarkdownToBeautifyMarkdown(markdown: string): string {\n  return removeExtraLine(removeLineTailBlank(markdown))\n}\n\nexport default convertMarkdownToBeautifyMarkdown\n","import {\n  TAB_URL_TO_PLAIN\n, TAB_URL_TO_MARKDOWN\n, TAB_URL_TO_HTML\n, TAB_URL_TO_BBCODE\n, FRAME_URL_TO_PLAIN\n, FRAME_URL_TO_MARKDOWN\n, FRAME_URL_TO_HTML\n, FRAME_URL_TO_BBCODE\n, LINK_TO_MARKDOWN\n, LINK_TO_HTML\n, LINK_TO_BBCODE\n, SELECTION_TO_MARKDOWN\n, SELECTION_TO_HTML\n, SELECTION_TO_HTML_ONLY_A_TAG\n, SELECTION_TO_HTML_NO_ATTR\n, SELECTION_TO_BBCODE\n, SELECTION_TO_PLAIN\n, SELECTION_TO_PLAIN_TRIMMED\n, SELECTION_TO_RAW_STRING\n, IMAGE_TO_MARKDOWN\n, IMAGE_TO_MARKDOWN_DATA_URI_JPEG\n, IMAGE_TO_MARKDOWN_DATA_URI_PNG\n, IMAGE_TO_MARKDOWN_DATA_URI_WEBP\n, IMAGE_TO_HTML\n, IMAGE_TO_HTML_DATA_URI_JPEG\n, IMAGE_TO_HTML_DATA_URI_PNG\n, IMAGE_TO_HTML_DATA_URI_WEBP\n, IMAGE_TO_BBCODE\n, IMAGE_TO_DATA_URI_RAW\n, IMAGE_TO_DATA_URI_JPEG\n, IMAGE_TO_DATA_URI_PNG\n, IMAGE_TO_DATA_URI_WEBP\n, AUDIO_TO_HTML\n, VIDEO_TO_HTML\n} from './symbols'\n\ninterface IMenuItem {\n  id?: string\n  type?: string\n  contexts?: string[]\n  title?: string\n}\n\nexport default new Map<string[], IMenuItem[]>([\n  [['page'], [\n    { id: TAB_URL_TO_PLAIN }\n  , { id: TAB_URL_TO_MARKDOWN }\n  , { id: TAB_URL_TO_BBCODE }\n  , { id: TAB_URL_TO_HTML }\n  ]]\n, [['frame'], [\n    { id: FRAME_URL_TO_PLAIN }\n  , { id: FRAME_URL_TO_MARKDOWN }\n  , { id: FRAME_URL_TO_BBCODE }\n  , { id: FRAME_URL_TO_HTML }\n  ]]\n, [['link'], [\n    { id: LINK_TO_MARKDOWN }\n  , { id: LINK_TO_BBCODE }\n  , { id: LINK_TO_HTML }\n  ]]\n, [['selection'], [\n    { id: SELECTION_TO_MARKDOWN }\n  , { id: SELECTION_TO_BBCODE }\n  , { id: SELECTION_TO_HTML }\n  , { id: SELECTION_TO_HTML_ONLY_A_TAG }\n  , { id: SELECTION_TO_HTML_NO_ATTR }\n  , { id: SELECTION_TO_PLAIN }\n  , { id: SELECTION_TO_PLAIN_TRIMMED }\n  , { id: SELECTION_TO_RAW_STRING }\n  ]]\n, [['image'], [\n    { id: IMAGE_TO_MARKDOWN }\n  , { id: IMAGE_TO_MARKDOWN_DATA_URI_JPEG }\n  , { id: IMAGE_TO_MARKDOWN_DATA_URI_PNG }\n  , { id: IMAGE_TO_MARKDOWN_DATA_URI_WEBP }\n  , { id: IMAGE_TO_BBCODE }\n  , { id: IMAGE_TO_HTML }\n  , { id: IMAGE_TO_HTML_DATA_URI_JPEG }\n  , { id: IMAGE_TO_HTML_DATA_URI_PNG }\n  , { id: IMAGE_TO_HTML_DATA_URI_WEBP }\n  , { id: IMAGE_TO_DATA_URI_RAW }\n  , { id: IMAGE_TO_DATA_URI_JPEG }\n  , { id: IMAGE_TO_DATA_URI_PNG }\n  , { id: IMAGE_TO_DATA_URI_WEBP }\n  ]]\n, [['audio'], [\n    { id: AUDIO_TO_HTML }\n  ]]\n, [['video'], [\n    { id: VIDEO_TO_HTML }\n  ]]\n])\n"],"sourceRoot":""}